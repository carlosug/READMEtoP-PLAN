{
  "messages": [
    {
      "role": "user",
      "content": "Based on the provided README, your task is to identify and list the unique installation methods. These methods are plans containing instructions for installing research software, to be executed in a specific order and under defined conditions. There are four installation methods:\n\n    Binary: Download and run precompiled files. For example, GitHub releases.\n    Container: Use isolated environments. For example,, Docker, Podman, or Singularity.\n    Package Manager: Install via tools and indexed repositories. For example, Conda, Homebrew, or Pip\n    Source: Install using command-line, following instructions. For example, clone from repository or download files.\n\nIf no method is mentioned, write \"No method provided.\" Exclude code commands. Be concise.\n\n{README}\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\" = f\\\\\\\"\\\\\\\"\\\\\\\"\\\\ ## Installation **OS X & Linux:** 1. To download and install SICStus Prolog (it is needed), follow the instructions at https://sicstus.sics.se/download4.html. 2. Then, you can download DALI and test it by running an example DALI MAS: ```sh git clone https://github.com/AAAI-DISIM-UnivAQ/DALI.git cd DALI/Examples/advanced bash startmas.sh ``` &nbsp;&nbsp;&nbsp;&nbsp; You will see different windows opening: * &nbsp;&nbsp;&nbsp;&nbsp; Prolog LINDA server (active_server_wi.pl) * &nbsp;&nbsp;&nbsp;&nbsp; Prolog FIPA client (active_user_wi.pl) * &nbsp;&nbsp;&nbsp;&nbsp; 1 instance of DALI metaintepreter for each agent (active_dali_wi.pl) **Windows:** 1. To download and install SICStus Prolog (it is needed), follow the instructions at https://sicstus.sics.se/download4.html. 2. Then, you can download DALI from https://github.com/AAAI-DISIM-UnivAQ/DALI.git. 3. Unzip the repository, go to the folder 'DALI/Examples/basic', and test if DALI works by duble clicking 'startmas.bat' file (this will launch an example DALI MAS). \\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp; You will see different windows opening: * &nbsp;&nbsp;&nbsp;&nbsp; Prolog LINDA server (active_server_wi.pl) * &nbsp;&nbsp;&nbsp;&nbsp; Prolog FIPA client (active_user_wi.pl) * &nbsp;&nbsp;&nbsp;&nbsp; 1 instance of DALI metaintepreter for each agent (active_dali_wi.pl)\\\"\\n\\n\\n"
    },
    {
      "role": "assistant",
      "content": "- OS X & Linux:\n1. Binary: Download and install SICStus Prolog\n2. Source: Follow the instructions at <https://github.com/AAAI-DISIM-UnivAQ/DALI>\n\n- Windows:\n1. Binary: Download and install SICStus Prolog\n2. Source: Download DALI, unzip the repository, and follow the instructions at <https://github.com/AAAI-DISIM-UnivAQ/DALI>\n3. No method provided for launching the example DALI MAS on Windows."
    },
    {
      "role": "user",
      "content": "Based on the provided README, your task is to identify and list the unique installation methods. These methods are plans containing instructions for installing research software, to be executed in a specific order and under defined conditions. There are four installation methods:\n\n    Binary: Download and run precompiled files. For example, GitHub releases.\n    Container: Use isolated environments. For example,, Docker, Podman, or Singularity.\n    Package Manager: Install via tools and indexed repositories. For example, Conda, Homebrew, or Pip\n    Source: Install using command-line, following instructions. For example, clone from repository or download files.\n\nIf no method is mentioned, write \"No method provided.\" Exclude code commands. Be concise.\n\n{README}\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\" = f\\\\\\\"\\\\\\\"\\\\\\\"\\\\ ## Installation \\n Please refer to the `setup.py` file for installation instructions.\\\"\\n\\n\\n"
    },
    {
      "role": "assistant",
      "content": "No method provided. Refer to the `setup.py` file for installation instructions."
    },
    {
      "role": "user",
      "content": "Based on the provided README, your task is to identify and list the unique installation methods. These methods are plans containing instructions for installing research software, to be executed in a specific order and under defined conditions. There are four installation methods:\n\n    Binary: Download and run precompiled files. For example, GitHub releases.\n    Container: Use isolated environments. For example,, Docker, Podman, or Singularity.\n    Package Manager: Install via tools and indexed repositories. For example, Conda, Homebrew, or Pip\n    Source: Install using command-line, following instructions. For example, clone from repository or download files.\n\nIf no method is mentioned, write \"No method provided.\" Exclude code commands. Be concise.\n\n{README}\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\" = f\\\\\\\"\\\\\\\"\\\\\\\"\\\\ ## Getting Started Step 1: Download the dataset folder from onedrive by [data.zip](https://portland-my.sharepoint.com/:u:/g/personal/liuhui3-c_my_cityu_edu_hk/EfApQlFP3PhFjUW4527STo0BALMdP16zs-HPMNgwQVFWsA?e=zoHlW2). Unzip this folder into the project directory. You can find four orginal datasets, pre-processed datasets (i.e., val.jsonl, test.jsonl, train.jsonl in each dataset folder) and the files incuding questions and answers Step 2: Place you OpenAI key into the file named api_key.txt. ``` openai.api_key = ``.\\\"\\n\\n\\n"
    },
    {
      "role": "assistant",
      "content": "1. Binary: Download dataset folder from OneDrive (data.zip) and unzip it into the project directory.\n2. Source: Place your OpenAI key into the file named `api_key.txt`."
    },
    {
      "role": "user",
      "content": "Based on the provided README, your task is to identify and list the unique installation methods. These methods are plans containing instructions for installing research software, to be executed in a specific order and under defined conditions. There are four installation methods:\n\n    Binary: Download and run precompiled files. For example, GitHub releases.\n    Container: Use isolated environments. For example,, Docker, Podman, or Singularity.\n    Package Manager: Install via tools and indexed repositories. For example, Conda, Homebrew, or Pip\n    Source: Install using command-line, following instructions. For example, clone from repository or download files.\n\nIf no method is mentioned, write \"No method provided.\" Exclude code commands. Be concise.\n\n{README}\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\" = f\\\\\\\"\\\\\\\"\\\\\\\"\\\\ ## Installation Clone this repository and its submodules. We use docker to install dependencies The recommended way to build the docker image is ```bash docker build -t steam_icp \\n --build-arg USERID=$(id -u) \\n --build-arg GROUPID=$(id -g) \\n --build-arg USERNAME=$(whoami) \\n --build-arg HOMEDIR=${HOME} . ``` When starting a container, remember to mount the code, dataset, and output directories to proper locations in the container. An example command to start a docker container with the image is ```bash docker run -it --name steam_icp \\n --privileged \\n --network=host \\n -e DISPLAY=$DISPLAY \\n -v /tmp/.X11-unix:/tmp/.X11-unix \\n -v ${HOME}:${HOME}:rw \\n steam_icp ``` (Inside Container) Go to the root directory of this repository and build STEAM-ICP ```bash bash build.sh ```.\\\"\\n\\n\\n\n"
    },
    {
      "role": "assistant",
      "content": "1. Source: Clone this repository and its submodules.\n2. Container: Use Docker to install dependencies and build the Docker image.\n3. Container: Use Docker to start a container with the image."
    },
    {
      "role": "user",
      "content": "Based on the provided README, your task is to identify and list the unique installation methods. These methods are plans containing instructions for installing research software, to be executed in a specific order and under defined conditions. There are four installation methods:\n\n    Binary: Download and run precompiled files. For example, GitHub releases.\n    Container: Use isolated environments. For example,, Docker, Podman, or Singularity.\n    Package Manager: Install via tools and indexed repositories. For example, Conda, Homebrew, or Pip\n    Source: Install using command-line, following instructions. For example, clone from repository or download files.\n\nIf no method is mentioned, write \"No method provided.\" Exclude code commands. Be concise.\n\n{README}\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\" = f\\\\\\\"\\\\\\\"\\\\\\\"\\\\ # Installation - Make sure you have Python, Pip and R installed. - Checkout this repository - Install the python dependencies with ``` pip3 install -r requirements.txt ``` - Install the `pygirgs` package at https://github.com/PFischbeck/pygirgs - Install the R dependencies (used for plots) with ``` R -e 'install.packages(c(ggplot2, reshape2, plyr, dplyr, scales), repos=https://cloud.r-project.org/)' ``` - Download the file `konect-data.zip` from [Zenodo](https://doi.org/10.5281/zenodo.10629451) and extract its contents into the folder `input_data/konect` - Optional: Download the file `output-data.zip` from [Zenodo](https://doi.org/10.5281/zenodo.10629451) and extract its contents into the folder `output_data`. This way, you can access all experiment results without running them yourself.\\\"\\n\\n\\n"
    },
    {
      "role": "assistant",
      "content": "1. Package Manager: Install Python, Pip, and R.\n2. Source: Checkout this repository.\n3. Package Manager: Install Python dependencies with `pip3 install -r requirements.txt`\n4. Source: Install the `pygirgs` package from <https://github.com/PFischbeck/pygirgs>\n5. Package Manager: Install R dependencies with `R -e 'install.packages(c(ggplot2, reshape2, plyr, dplyr, scales), repos=https://cloud.r-project.org/)'`\n6. Binary: Download the file `konect-data.zip` from Zenodo and extract its contents into the folder `input_data/konect`\n7. Binary: Optional: Download the file `output-data.zip` from Zenodo and extract its contents into the folder `output_data`."
    },
    {
      "role": "user",
      "content": "Based on the provided README, your task is to identify and list the unique installation methods. These methods are plans containing instructions for installing research software, to be executed in a specific order and under defined conditions. There are four installation methods:\n\n    Binary: Download and run precompiled files. For example, GitHub releases.\n    Container: Use isolated environments. For example,, Docker, Podman, or Singularity.\n    Package Manager: Install via tools and indexed repositories. For example, Conda, Homebrew, or Pip\n    Source: Install using command-line, following instructions. For example, clone from repository or download files.\n\nIf no method is mentioned, write \"No method provided.\" Exclude code commands. Be concise.\n\n{README}\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\" = f\\\\\\\"\\\\\\\"\\\\\\\"\\\\ ## Installation pip install -r requirements.txt *Note: I did not us a virtual environment so the packages in the requirements.txt file are probably not reflective of all the packages used in this project. If some issues pop up please don't hesitate to email me at: gpinto@usc.edu*\\\"\\n\\n\\n"
    },
    {
      "role": "assistant",
      "content": "Package Manager: Install via tools and indexed repositories with `pip install -r requirements.txt`."
    },
    {
      "role": "user",
      "content": "Based on the provided README, your task is to identify and list the unique installation methods. These methods are plans containing instructions for installing research software, to be executed in a specific order and under defined conditions. There are four installation methods:\n\n    Binary: Download and run precompiled files. For example, GitHub releases.\n    Container: Use isolated environments. For example,, Docker, Podman, or Singularity.\n    Package Manager: Install via tools and indexed repositories. For example, Conda, Homebrew, or Pip\n    Source: Install using command-line, following instructions. For example, clone from repository or download files.\n\nIf no method is mentioned, write \"No method provided.\" Exclude code commands. Be concise.\n\n{README}\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\" = f\\\\\\\"\\\\\\\"\\\\\\\"\\\\ ## Installation ### Dependencies Initialize git submodules with ``` git submodule init git submodule update ``` ### Python environment Install the specific versions of every package from `requirements.txt` in a new conda environment: ``` conda create --name gsft python=3.9 conda activate gsft pip install -r requirements.txt ``` To ensure that Python paths are properly defined, update the `~/.bashrc` by adding the following lines ``` export GSFT_PATH=/path_to_gsfc export PYTHONPATH=$PYTHONPATH:/$GSFT_PATH ```\\\"\\n\\n\\n"
    },
    {
      "role": "assistant",
      "content": "1. Source: Initialize git submodules with `git submodule init` and `git submodule update`.\n2. Package Manager: Install specific versions of every package from `requirements.txt` in a new Conda environment with `conda create --name gsft python=3.9` and `conda activate gsft`.\n3. Source: Update the `~/.bashrc` by adding the following lines `export GSFT_PATH=/path_to_gsfc` and `export PYTHONPATH=$PYTHONPATH:/$GSFT_PATH`."
    },
    {
      "role": "user",
      "content": "Based on the provided README, your task is to identify and list the unique installation methods. These methods are plans containing instructions for installing research software, to be executed in a specific order and under defined conditions. There are four installation methods:\n\n    Binary: Download and run precompiled files. For example, GitHub releases.\n    Container: Use isolated environments. For example,, Docker, Podman, or Singularity.\n    Package Manager: Install via tools and indexed repositories. For example, Conda, Homebrew, or Pip\n    Source: Install using command-line, following instructions. For example, clone from repository or download files.\n\nIf no method is mentioned, write \"No method provided.\" Exclude code commands. Be concise.\n\n\n{README}\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\" = f\\\\\\\"\\\\\\\"\\\\\\\"\\\\ ## Installation The project can be installed by running the following command in your terminal: ```bash pip install -r requirements.txt ```.\\n\\n\\n"
    },
    {
      "role": "assistant",
      "content": "Package Manager: Install via tools and indexed repositories with `pip install -r requirements.txt`."
    },
    {
      "role": "user",
      "content": "Based on the provided README, your task is to identify and list the unique installation methods. These methods are plans containing instructions for installing research software, to be executed in a specific order and under defined conditions. There are four installation methods:\n\n    Binary: Download and run precompiled files. For example, GitHub releases.\n    Container: Use isolated environments. For example,, Docker, Podman, or Singularity.\n    Package Manager: Install via tools and indexed repositories. For example, Conda, Homebrew, or Pip\n    Source: Install using command-line, following instructions. For example, clone from repository or download files.\n\nIf no method is mentioned, write \"No method provided.\" Exclude code commands. Be concise.\n\n\n{README}\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\" = f\\\\\\\"\\\\\\\"\\\\\\\"\\\\ ## Installation ### Step1: Download VIGA Download VIGA with Git from GitHub ``` git clone https://github.com/viralInformatics/VIGA.git ``` or Download ZIP to local ### Step 2: Download Database ``` 1. download taxdmp.zip [Index of /pub/taxonomy (nih.gov)](https://ftp.ncbi.nlm.nih.gov/pub/taxonomy/) and unzip taxdmp.zip and put it in ./db/ 2. download prot.accession2taxid file from https://ftp.ncbi.nlm.nih.gov/pub/taxonomy/accession2taxid/ 3. download RefSeqVirusProtein file from wget -c ftp.ncbi.nlm.nih.gov/refseq/release/viral/viral.1.protein.faa.gz gzip -d viral.1.protein.faa.gz mv viral.1.protein.faa RefSeqVirusProtein 4. download nr file from wget -c ftp://ftp.ncbi.nlm.nih.gov/blast/db/FASTA/nr.gz or ascp -T -i asperaweb_id_dsa.openssh --host=ftp.ncbi.nih.gov --user=anonftp --mode=recv /blast/db/FASTA/nr.gz ./ gzip -d nr.gz 5. Use Diamond v2.0.11.149 to create two separate databases as the indexing libraries in the current version are incompatible with each other. 6. In order to set up a reference database for DIAMOND, the makedb command needs to be executed with the following command line: diamond makedb --in YourPath/RefSeqVirusProtein -d Diamond_RefSeqVirusProtein --taxonmap YourPath/prot.accession2taxid --taxonnodes YourPath/nodes.dmp diamond makedb --in nr -d Dimond_nr --taxonmap YourPath/prot.accession2taxid --taxonnodes YourPath/nodes.dmp ``` ### Step 3: Installation of dependent software #### Installing Some Software Using Conda ``` conda install fastp=0.12.4 trinity=2.8.5 diamond=2.0.11.149 ragtag=2.1.0 quast=5.0.2 ``` #### Manual Installation of MetaCompass https://github.com/marbl/MetaCompass ### Step 4: Python Dependencies Base on python 3.6.8 ``` pip install pandas=1.1.5 numpy=1.19.5 matplotlib=3.3.4 biopython=1.79 ```.\\n\\n\\n"
    },
    {
      "role": "assistant",
      "content": "1. Source: Download VIGA with Git from GitHub with `git clone https://github.com/viralInformatics/VIGA.git` or download ZIP to local.\n2. Binary: Download database files from specific URLs and unzip them.\n3. Source: Use Diamond v2.0.11.149 to create two separate databases with the following command line: `diamond makedb --in YourPath/RefSeqVirusProtein -d Diamond_RefSeqVirusProtein --taxonmap YourPath/prot.accession2taxid --taxonnodes YourPath/nodes.dmp` and `diamond makedb --in nr -d Dimond_nr --taxonmap YourPath/prot.accession2taxid --taxonnodes YourPath/nodes.dmp`.\n4. Package Manager: Install dependent software using Conda with `conda install fastp=0.12.4 trinity=2.8.5 diamond=2.0.11.149 ragtag=2.1.0 quast=5.0.2`.\n5. Source: Install MetaCompass from <https://github.com/marbl/MetaCompass>.\n6. Package Manager: Install Python dependencies based on python 3.6.8 with `pip install pandas=1.1.5 numpy=1.19.5 matplotlib=3.3.4 biopython=1.79`."
    },
    {
      "role": "user",
      "content": "Based on the provided README, your task is to identify and list the unique installation methods. These methods are plans containing instructions for installing research software, to be executed in a specific order and under defined conditions. There are four installation methods:\n\n    Binary: Download and run precompiled files. For example, GitHub releases.\n    Container: Use isolated environments. For example,, Docker, Podman, or Singularity.\n    Package Manager: Install via tools and indexed repositories. For example, Conda, Homebrew, or Pip\n    Source: Install using command-line, following instructions. For example, clone from repository or download files.\n\nIf no method is mentioned, write \"No method provided.\" Exclude code commands. Be concise.\n\n\n{README}\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\" = f\\\\\\\"\\\\\\\"\\\\\\\"\\\\ ## Installation ### NRN-EZ was built with PyInstaller 3.6, and requires the following languages and libraries: • Python 3.6.9 and higher (currently up to 3.10) • PyQt 5.10.1 • PyQtGraph 0.11.0 Installation instructions for Linux (Ubuntu and Pop!_OS): download the Linux zip file and, from the command window, run a bash command for the install.sh file, in the corresponding installation folder. Installation instructions for Mac OS: download the Mac zip file and copy the NRN-EZ app to the Applications folder. Installation instructions for Windows: download the Win zip file and run the installation wizard.\\n\\n\\n"
    },
    {
      "role": "assistant",
      "content": "1. Binary: Download and run precompiled files for Linux, Mac, or Windows.\n2. Source: Run the install.sh file for Linux or run the installation wizard for Windows.\n3. Source: Copy the NRN-EZ app to the Applications folder for Mac.\n\n(Note: The specific versions of the required libraries and Python are not provided in the README.)"
    },
    {
      "role": "user",
      "content": "Based on the provided README, your task is to identify and list the unique installation methods. These methods are plans containing instructions for installing research software, to be executed in a specific order and under defined conditions. There are four installation methods:\n\n    Binary: Download and run precompiled files. For example, GitHub releases.\n    Container: Use isolated environments. For example,, Docker, Podman, or Singularity.\n    Package Manager: Install via tools and indexed repositories. For example, Conda, Homebrew, or Pip\n    Source: Install using command-line, following instructions. For example, clone from repository or download files.\n\nIf no method is mentioned, write \"No method provided.\" Exclude code commands. Be concise.\n\n{README}\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\" = f\\\\\\\"\\\\\\\"\\\\\\\"\\\\ ## Setup The following steps provide the necessary setup to run our codes. 1. Create a Python virtual environment with Conda: ``` conda create -n myenv python=3.10 conda activate myenv ``` 2. Install PyTorch `v2.1.0` with compatible cuda version, following instructions from [PyTorch Installation Page](https://pytorch.org/get-started/locally/). For example with cuda 11: ``` pip install torch==2.1.0 torchvision==0.16.0 torchaudio==2.1.0 --index-url https://download.pytorch.org/whl/cu118 ``` 3. Install the following Python dependencies to run the codes. ``` python -m pip install . python -m pip install flash-attn --no-build-isolation ``` 4. Login to your huggingface account for downloading models ``` huggingface-cli login --token ${your_access_token} ```.\\n\\n\\n"
    },
    {
      "role": "assistant",
      "content": "1. Package Manager: Install via tools and indexed repositories with `conda create -n myenv python=3.10`\n2. Package Manager: Install PyTorch `v2.1.0` with compatible cuda version, following instructions from PyTorch Installation Page with `pip install torch==2.1.0 torchvision==0.16.0 torchaudio==2.1.0 --index-url https://download.pytorch.org/whl/cu118`\n3. Package Manager: Install Python dependencies to run the codes with `python -m pip install .` and `python -m pip install flash-attn --no-build-isolation`\n4. Source: Login to your huggingface account for downloading models with `huggingface-cli login --token ${your_access_token}`"
    },
    {
      "role": "user",
      "content": "Based on the provided README, your task is to identify and list the unique installation methods. These methods are plans containing instructions for installing research software, to be executed in a specific order and under defined conditions. There are four installation methods:\n\n    Binary: Download and run precompiled files. For example, GitHub releases.\n    Container: Use isolated environments. For example,, Docker, Podman, or Singularity.\n    Package Manager: Install via tools and indexed repositories. For example, Conda, Homebrew, or Pip\n    Source: Install using command-line, following instructions. For example, clone from repository or download files.\n\nIf no method is mentioned, write \"No method provided.\" Exclude code commands. Be concise.\n\n{README}\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\" = f\\\\\\\"\\\\\\\"\\\\\\\"\\\\ ## Requirements The code has been tested with Python 3.9.13. Please first install the required packages by: ```bash pip install -r requirements.txt ``` You also need an OpenAI API key to run GeneGPT with Codex. Replace the placeholder with your key in `config.py`: ```bash $ cat config.py API_KEY = 'YOUR_OPENAI_API_KEY' ```.\\n\\n\\n"
    },
    {
      "role": "assistant",
      "content": "1. Package Manager: Install via tools and indexed repositories with `pip install -r requirements.txt`\n2. Source: Replace the placeholder with your key in `config.py` with `cat config.py API_KEY = 'YOUR_OPENAI_API_KEY'`"
    },
    {
      "role": "user",
      "content": "Based on the provided README, your task is to identify and list the unique installation methods. These methods are plans containing instructions for installing research software, to be executed in a specific order and under defined conditions. There are four installation methods:\n\n    Binary: Download and run precompiled files. For example, GitHub releases.\n    Container: Use isolated environments. For example,, Docker, Podman, or Singularity.\n    Package Manager: Install via tools and indexed repositories. For example, Conda, Homebrew, or Pip\n    Source: Install using command-line, following instructions. For example, clone from repository or download files.\n\nIf no method is mentioned, write \"No method provided.\" Exclude code commands. Be concise.\n\n{README}\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\" = f\\\\\\\"\\\\\\\"\\\\\\\"\\\\ ### Docker installation (isolated) With the following instructions you can also easily build the Docker image yourself. If you want to run the code on bare metal jump [Native installation](#Native-installation). First, install Docker on your machine. Then move to the original directory `learning_to_fly` and build the Docker image: ``` docker build -t arpllab/learning_to_fly . ``` If desired you can also build the container for building the firmware: ``` docker build -t arpllab/learning_to_fly_build_firmware -f Dockerfile_build_firmware . ``` After that you can run it using e.g.: ``` docker run -it --rm -p 8000:8000 arpllab/learning_to_fly ``` This will open the port `8000` for the UI of the training program and run it inside the container. Navigate to [https://0.0.0.0:8000](https://0.0.0.0:8000) with your browser, and you should see something like in the screenshot above (after starting the training). The training UI configuration does not log data by default. If you want to inspect the training data run: ``` docker run -it --rm -p 6006:6006 arpllab/learning_to_fly training_headless ``` Navigate to [https://0.0.0.0:6006](https://0.0.0.0:6006) with your browser to investigate the Tensorboard logs. If you would like to benchmark the training speed you can use: ``` docker run -it --rm arpllab/learning_to_fly training_benchmark ``` This is the fastest configuration, without logging, UI, checkpointing etc. ### Native installation Clone this repository: ``` git clone https://github.com/arplaboratory/learning-to-fly learning_to_fly cd learning_to_fly ``` Then instantiate the `RLtools` submodule: ``` git submodule update --init -- external/rl_tools cd external/rl_tools ``` Then instantiate some dependencies of `RLtools` (for conveniences like checkpointing, Tensorboard logging, testing, etc.): ``` git submodule update --init -- external/cli11 external/highfive external/json/ external/tensorboard tests/lib/googletest/ ``` #### Install dependencies on Ubuntu ``` sudo apt update && sudo apt install libhdf5-dev libopenblas-dev protobuf-compiler libprotobuf-dev libboost-all-dev ``` As an alternative to openblas you can also install [Intel MKL](https://www.intel.com/content/www/us/en/developer/tools/oneapi/onemkl-download.html) which in our experience is significantly faster than OpenBLAS. #### Install dependencies on macOS ``` brew install hdf5 protobuf boost ``` Please make sure that `brew` links the libraries correctly. If not you might have to link e.g. `protobuf` manually using `brew link protobuf`. Going back to the main directory (`learning_to_fly`), we can now configure the build of the code: ``` cd ../../ mkdir build cd build ``` - Ubuntu + OpenBLAS: `cmake .. -DCMAKE_BUILD_TYPE=Release -DRL_TOOLS_BACKEND_ENABLE_OPENBLAS:BOOL=ON` - Ubuntu + MKL: `cmake .. -DCMAKE_BUILD_TYPE=Release -DRL_TOOLS_BACKEND_ENABLE_MKL:BOOL=ON` - macOS (tested on Sonoma): `cmake .. -DCMAKE_BUILD_TYPE=Release` Finally, we can build the targets: ``` cmake --build . -j8 ``` After successfully building the targets, we can run the code (in the original directory `learning_to_fly`): ``` cd .. ./build/src/training_headless ``` While this is running, you should be able to see training metrics using Tensorboard If not already installed: ``` python3 -m pip install tensorboard ``` Then from the original directory `learning_to_fly`: ``` tensorboard --logdir=logs ``` To run the training with the UI, we download the JavaScript dependencies in the form of the two files `three.module.js` and `OrbitControls.js`: ``` cd src/ui ./get_dependencies.sh ``` After that we can execute the UI binary from the root folder: ``` cd ../../ ./build/src/ui 0.0.0.0 8000 ``` Now you should be able to navigate to [http://0.0.0.0:8000](http://0.0.0.0:8000) in your browser and start the training. To run the benchmark (with UI, checkpointing and Tensorboard logging turned off): ``` sudo nice -n -20 ./build/src/training_benchmark ```.\\n\\n\\n\n\n"
    },
    {
      "role": "assistant",
      "content": "1. Container: Use isolated environments with Docker to build the Docker image.\n2. Container: Use isolated environments with Docker to build the container for building the firmware.\n3. Source: Clone from repository or download files with `git clone https://github.com/arplaboratory/learning-to-fly learning_to_fly`.\n4. Source: Instantiate the `RLtools` submodule with `git submodule update --init -- external/rl_tools`.\n5. Source: Instantiate some dependencies of `RLtools` with `git submodule update --init -- external/cli11 external/highfive external/json/ external/tensorboard tests/lib/googletest/`.\n6. Source: Install dependencies on Ubuntu with `sudo apt update && sudo apt install libhdf5-dev libopenblas-dev protobuf-compiler libprotobuf-dev libboost-all-dev`.\n7. Source: Install dependencies on macOS with `brew install hdf5 protobuf boost`.\n8. Source: Configure the build of the code with `cmake .. -DCMAKE_BUILD_TYPE=Release -DRL_TOOLS_BACKEND_ENABLE_OPENBLAS:BOOL=ON` or `cmake .. -DCMAKE_BUILD_TYPE=Release -DRL_TOOLS_BACKEND_ENABLE_MKL:BOOL=ON` or `cmake .. -DCMAKE_BUILD_TYPE=Release`.\n9. Source: Build the targets with `cmake --build . -j8`.\n10. Source: Run the code with `./build/src/training_headless`.\n11. Source: Run the training with the UI with `./build/src/ui 0.0.0.0 8000`.\n12. Source: Run the benchmark with `sudo nice -n -20 ./build/src/training_benchmark`."
    },
    {
      "role": "user",
      "content": "Based on the provided README, your task is to identify and list the unique installation methods. These methods are plans containing instructions for installing research software, to be executed in a specific order and under defined conditions. There are four installation methods:\n\n    Binary: Download and run precompiled files. For example, GitHub releases.\n    Container: Use isolated environments. For example,, Docker, Podman, or Singularity.\n    Package Manager: Install via tools and indexed repositories. For example, Conda, Homebrew, or Pip\n    Source: Install using command-line, following instructions. For example, clone from repository or download files.\n\nIf no method is mentioned, write \"No method provided.\" Exclude code commands. Be concise.\n\n{README}\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\" = f\\\\\\\"\\\\\\\"\\\\\\\"\\\\ ## Setup This codebase is supported on Ubuntu and has not been tested on Windows or macOS. We recommend using TPUs for training and inference, although it is also possible to use GPUs. On TPU, the code is highly optimized with Jax's Pallas and can achieve high MFUs with RingAttention at very large context sizes. On GPU, the code is based on XLA and is not as optimized as it is for TPU. Install the requirements with: ``` conda create -n lwm python=3.10 pip install -U `jax[cuda12_pip]==0.4.23` -f https://storage.googleapis.com/jax-releases/jax_cuda_releases.html pip install -r requirements.txt ``` or set up TPU VM with: ``` sh tpu_vm_setup.sh ```.\\n\\n\\n"
    },
    {
      "role": "assistant",
      "content": "1. Container: Use isolated environments with Docker to set up TPU VM with `sh tpu_vm_setup.sh`.\n2. Package Manager: Install via tools and indexed repositories with `conda create -n lwm python=3.10`.\n3. Package Manager: Install via tools and indexed repositories with `pip install -U `jax[cuda12\\_pip]==0.4.23` -f https://storage.googleapis.com/jax-releases/jax\\_cuda\\_releases.html`.\n4. Package Manager: Install via tools and indexed repositories with `pip install -r requirements.txt`."
    },
    {
      "role": "user",
      "content": "Based on the provided README, your task is to identify and list the unique installation methods. These methods are plans containing instructions for installing research software, to be executed in a specific order and under defined conditions. There are four installation methods:\n\n    Binary: Download and run precompiled files. For example, GitHub releases.\n    Container: Use isolated environments. For example,, Docker, Podman, or Singularity.\n    Package Manager: Install via tools and indexed repositories. For example, Conda, Homebrew, or Pip\n    Source: Install using command-line, following instructions. For example, clone from repository or download files.\n\nIf no method is mentioned, write \"No method provided.\" Exclude code commands. Be concise.\n\n\n{README}\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\" = f\\\\\\\"\\\\\\\"\\\\\\\"\\\\ ## ✨ Getting Started ### 🛠️ Step 1: Installation UFO requires **Python >= 3.10** running on **Windows OS >= 10**. It can be installed by running the following command: ```bash # [optional to create conda environment] # conda create -n ufo python=3.10 # conda activate ufo # clone the repository git clone https://github.com/microsoft/UFO.git cd UFO # install the requirements pip install -r requirements.txt ```.\\n\\n\\n"
    },
    {
      "role": "assistant",
      "content": "1. Package Manager: Install via tools and indexed repositories with `conda create -n ufo python=3.10`.\n2. Source: Install using command-line, following instructions with `git clone https://github.com/microsoft/UFO.git`.\n3. Source: Install using command-line, following instructions with `pip install -r requirements.txt`."
    },
    {
      "role": "user",
      "content": "Based on the provided README, your task is to identify and list the unique installation methods. These methods are plans containing instructions for installing research software, to be executed in a specific order and under defined conditions. There are four installation methods:\n\n    Binary: Download and run precompiled files. For example, GitHub releases.\n    Container: Use isolated environments. For example,, Docker, Podman, or Singularity.\n    Package Manager: Install via tools and indexed repositories. For example, Conda, Homebrew, or Pip\n    Source: Install using command-line, following instructions. For example, clone from repository or download files.\n\nIf no method is mentioned, write \"No method provided.\" Exclude code commands. Be concise.\n\n{README}\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\" = f\\\\\\\"\\\\\\\"\\\\\\\"\\\\ ### 1. Installation YOLO-World is developed based on `torch==1.11.0` `mmyolo==0.6.0` and `mmdetection==3.0.0`. #### Clone Project ```bash git clone --recursive https://github.com/AILab-CVC/YOLO-World.git ``` #### Install ```bash pip install torch wheel -q pip install -e . ```.\\n\\n\\n"
    },
    {
      "role": "assistant",
      "content": "1. Source: Install using command-line, following instructions with `git clone --recursive https://github.com/AILab-CVC/YOLO-World.git`.\n2. Package Manager: Install via tools and indexed repositories with `pip install torch wheel -q`.\n3. Source: Install using command-line, following instructions with `pip install -e .`."
    },
    {
      "role": "user",
      "content": "Based on the provided README, your task is to identify and list the unique installation methods. These methods are plans containing instructions for installing research software, to be executed in a specific order and under defined conditions. There are four installation methods:\n\n    Binary: Download and run precompiled files. For example, GitHub releases.\n    Container: Use isolated environments. For example,, Docker, Podman, or Singularity.\n    Package Manager: Install via tools and indexed repositories. For example, Conda, Homebrew, or Pip\n    Source: Install using command-line, following instructions. For example, clone from repository or download files.\n\nIf no method is mentioned, write \"No method provided.\" Exclude code commands. Be concise.\n\n{README}\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\" = f\\\\\\\"\\\\\\\"\\\\\\\"\\\\ ##### Install See the [TensorFlow install guide](https://www.tensorflow.org/install) for the [pip package](https://www.tensorflow.org/install/pip), to [enable GPU support](https://www.tensorflow.org/install/gpu), use a [Docker container](https://www.tensorflow.org/install/docker), and [build from source](https://www.tensorflow.org/install/source). To install the current release, which includes support for [CUDA-enabled GPU cards](https://www.tensorflow.org/install/gpu) *(Ubuntu and Windows)*: ``` $ pip install tensorflow ``` Other devices (DirectX and MacOS-metal) are supported using [Device plugins](https://www.tensorflow.org/install/gpu_plugins#available_devices). A smaller CPU-only package is also available: ``` $ pip install tensorflow-cpu ``` To update TensorFlow to the latest version, add `--upgrade` flag to the above commands. *Nightly binaries are available for testing using the [tf-nightly](https://pypi.python.org/pypi/tf-nightly) and [tf-nightly-cpu](https://pypi.python.org/pypi/tf-nightly-cpu) packages on PyPi.*\\n\\n\\n"
    },
    {
      "role": "assistant",
      "content": "1. Package Manager: Install via tools and indexed repositories with `pip install tensorflow`.\n2. Package Manager: Install via tools and indexed repositories with `pip install tensorflow-cpu`.\n3. Package Manager: Install via tools and indexed repositories with `pip install tf-nightly` or `pip install tf-nightly-cpu`.\n4. Container: Use isolated environments with Docker to build from source.\n5. Source: Follow the TensorFlow install guide for the pip package, to enable GPU support, and build from source."
    },
    {
      "role": "user",
      "content": "Based on the provided README, your task is to identify and list the unique installation methods. These methods are plans containing instructions for installing research software, to be executed in a specific order and under defined conditions. There are four installation methods:\n\n    Binary: Download and run precompiled files. For example, GitHub releases.\n    Container: Use isolated environments. For example,, Docker, Podman, or Singularity.\n    Package Manager: Install via tools and indexed repositories. For example, Conda, Homebrew, or Pip\n    Source: Install using command-line, following instructions. For example, clone from repository or download files.\n\nIf no method is mentioned, write \"No method provided.\" Exclude code commands. Be concise.\n\n{README}\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\" = f\\\\\\\"\\\\\\\"\\\\\\\"\\\\ ## Installation ### With pip This repository is tested on Python 3.8+, Flax 0.4.1+, PyTorch 1.11+, and TensorFlow 2.6+. You should install 🤗 Transformers in a [virtual environment](https://docs.python.org/3/library/venv.html). If you're unfamiliar with Python virtual environments, check out the [user guide](https://packaging.python.org/guides/installing-using-pip-and-virtual-environments/). First, create a virtual environment with the version of Python you're going to use and activate it. Then, you will need to install at least one of Flax, PyTorch, or TensorFlow. Please refer to [TensorFlow installation page](https://www.tensorflow.org/install/), [PyTorch installation page](https://pytorch.org/get-started/locally/#start-locally) and/or [Flax](https://github.com/google/flax#quick-install) and [Jax](https://github.com/google/jax#installation) installation pages regarding the specific installation command for your platform. When one of those backends has been installed, 🤗 Transformers can be installed using pip as follows: ```bash pip install transformers ``` If you'd like to play with the examples or need the bleeding edge of the code and can't wait for a new release, you must [install the library from source](https://huggingface.co/docs/transformers/installation#installing-from-source). ### With conda 🤗 Transformers can be installed using conda as follows: ```shell script conda install conda-forge::transformers ``` > **_NOTE:_** Installing `transformers` from the `huggingface` channel is deprecated. Follow the installation pages of Flax, PyTorch or TensorFlow to see how to install them with conda. > **_NOTE:_** On Windows, you may be prompted to activate Developer Mode in order to benefit from caching. If this is not an option for you, please let us know in [this issue](https://github.com/huggingface/huggingface_hub/issues/1062).\\n\\n\\n"
    },
    {
      "role": "assistant",
      "content": "1. Package Manager: Install via tools and indexed repositories with `pip install transformers`.\n2. Container: Use isolated environments with Docker using `conda install conda-forge::transformers`.\n3. Source: Install from source with `pip install .` or `pip install -e .`.\n4. Source: Follow the TensorFlow installation page for the specific installation command for your platform.\n5. Source: Follow the PyTorch installation page for the specific installation command for your platform.\n6. Source: Follow the Flax and Jax installation pages to see how to install them with conda.\n7. Source: Follow the Flax and Jax installation pages to see how to install them from source."
    },
    {
      "role": "user",
      "content": "Based on the provided README, your task is to identify and list the unique installation methods. These methods are plans containing instructions for installing research software, to be executed in a specific order and under defined conditions. There are four installation methods:\n\n    Binary: Download and run precompiled files. For example, GitHub releases.\n    Container: Use isolated environments. For example,, Docker, Podman, or Singularity.\n    Package Manager: Install via tools and indexed repositories. For example, Conda, Homebrew, or Pip\n    Source: Install using command-line, following instructions. For example, clone from repository or download files.\n\nIf no method is mentioned, write \"No method provided.\" Exclude code commands. Be concise.\n\n{README}\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\" = f\\\\\\\"\\\\\\\"\\\\\\\"\\\\ # Installation ### Install from pip The key dependencies of DIG: Dive into Graphs are PyTorch (>=1.10.0), PyTorch Geometric (>=2.0.0), and RDKit. 1. Install [PyTorch](https://pytorch.org/get-started/locally/) (>=1.10.0) ```shell script $ python -c `import torch`; print(torch.__version__)` >>> 1.10.0 ``` 2. Install [PyG](https://pytorch-geometric.readthedocs.io/en/latest/notes/installation.html#) (>=2.0.0) ```shell script $ python -c `import torch_geometric; print(torch_geometric.__version__)` >>> 2.0.0 ``` 3. Install DIG: Dive into Graphs. ```shell script pip install dive-into-graphs ``` After installation, you can check the version. You have successfully installed DIG: Dive into Graphs if no error occurs. ``` shell script $ python >>> from dig.version import __version__ >>> print(__version__) ``` ### Install from source If you want to try the latest features that have not been released yet, you can install dig from source. ```shell script git clone https://github.com/divelab/DIG.git cd DIG pip install . ```.\\n\\n\\n"
    },
    {
      "role": "assistant",
      "content": "1. Package Manager: Install via tools and indexed repositories with `pip install dive-into-graphs`.\n2. Source: Install using command-line, following instructions with `git clone https://github.com/divelab/DIG.git` and `pip install .`.\n3. Source: Install from source with `git clone https://github.com/divelab/DIG.git`.\n4. Source: Check the version with `python >>> from dig.version import __version__ >>> print(__version__)`."
    },
    {
      "role": "user",
      "content": "Based on the provided README, your task is to identify and list the unique installation methods. These methods are plans containing instructions for installing research software, to be executed in a specific order and under defined conditions. There are four installation methods:\n\n    Binary: Download and run precompiled files. For example, GitHub releases.\n    Container: Use isolated environments. For example,, Docker, Podman, or Singularity.\n    Package Manager: Install via tools and indexed repositories. For example, Conda, Homebrew, or Pip\n    Source: Install using command-line, following instructions. For example, clone from repository or download files.\n\nIf no method is mentioned, write \"No method provided.\" Exclude code commands. Be concise.\n\n\n{README}\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\" = f\\\\\\\"\\\\\\\"\\\\\\\"\\\\ ## Quick Install With pip: ```bash pip install langchain ``` With conda: ```bash conda install langchain -c conda-forge ``` .\\n\\n\\n"
    },
    {
      "role": "assistant",
      "content": "1. Package Manager: Install via tools and indexed repositories with `pip install langchain`.\n2. Package Manager: Install via tools and indexed repositories with `conda install langchain -c conda-forge`.\n3. No method provided."
    },
    {
      "role": "user",
      "content": "Based on the provided README, your task is to identify and list the unique installation methods. These methods are plans containing instructions for installing research software, to be executed in a specific order and under defined conditions. There are four installation methods:\n\n    Binary: Download and run precompiled files. For example, GitHub releases.\n    Container: Use isolated environments. For example,, Docker, Podman, or Singularity.\n    Package Manager: Install via tools and indexed repositories. For example, Conda, Homebrew, or Pip\n    Source: Install using command-line, following instructions. For example, clone from repository or download files.\n\nIf no method is mentioned, write \"No method provided.\" Exclude code commands. Be concise.\n\n{README}\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\" = f\\\\\\\"\\\\\\\"\\\\\\\"\\\\### Installation 1. Copy the `CamGen_v2` folder into the Blender [add-on folder](https://docs.blender.org/manual/en/latest/advanced/blender_directory_layout.html#platform-dependent-paths) that is right for your operating system, e.g. for Blender 4.0 under Linux ~/.config/blender/4.0/scripts/addons/ 2. Open Blender and navigate to `Edit > Preferences > Add-ons` 3. Find and activate `Generic: Camera_Generator_v2` the list of available Add-ons. **You will need to press *refresh* in the Add-ons panel if you do not see the Camera_Generator option.** 4. [Optional] To enable experimental lens analysis operations and plotting of the results, additional packages have to be installed for Blender's bundled Python version. '`$BLENDERPATH/$VERSION/python/bin/python3.10 -m pip install matplotlib PyQt5`.\\n\\n\\n"
    },
    {
      "role": "assistant",
      "content": "1. Source: Install using command-line, following instructions with `copy the CamGen_v2 folder into the Blender add-on folder`.\n2. Source: Follow the Blender manual for your operating system, e.g. for Blender 4.0 under Linux `~/.config/blender/4.0/scripts/addons/`.\n3. Source: Follow the Blender manual for your operating system, e.g. for Blender 4.0 under Linux `~/.config/blender/4.0/scripts/addons/` to find and activate `Generic: Camera_Generator_v2` the list of available Add-ons.\n4. Source: Follow the Blender manual for your operating system, e.g. for Blender 4.0 under Linux `~/.config/blender/4.0/python/bin/python3.10 -m pip install matplotlib PyQt5` to install additional packages for Blender's bundled Python version.\n5. No method provided."
    },
    {
      "role": "user",
      "content": "Based on the provided README, your task is to identify and list the unique installation methods. These methods are plans containing instructions for installing research software, to be executed in a specific order and under defined conditions. There are four installation methods:\n\n    Binary: Download and run precompiled files. For example, GitHub releases.\n    Container: Use isolated environments. For example,, Docker, Podman, or Singularity.\n    Package Manager: Install via tools and indexed repositories. For example, Conda, Homebrew, or Pip\n    Source: Install using command-line, following instructions. For example, clone from repository or download files.\n\nIf no method is mentioned, write \"No method provided.\" Exclude code commands. Be concise.\n\n{README}\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\" = f\\\\\\\"\\\\\\\"\\\\\\\"\\\\## Setup First, download and set up the repo: ```bash git clone https://github.com/facebookresearch/DiT.git cd DiT ``` We provide an [`environment.yml`](environment.yml) file that can be used to create a Conda environment. If you only want to run pre-trained models locally on CPU, you can remove the `cudatoolkit` and `pytorch-cuda` requirements from the file. ```bash conda env create -f environment.yml conda activate DiT ```.\\n\\n\\n"
    },
    {
      "role": "assistant",
      "content": "1. Source: Install using command-line, following instructions with `git clone https://github.com/facebookresearch/DiT.git` and `conda env create -f environment.yml`.\n2. Package Manager: Install via tools and indexed repositories with `conda activate DiT`.\n3. No method provided."
    },
    {
      "role": "user",
      "content": "Based on the provided README, your task is to identify and list the unique installation methods. These methods are plans containing instructions for installing research software, to be executed in a specific order and under defined conditions. There are four installation methods:\n\n    Binary: Download and run precompiled files. For example, GitHub releases.\n    Container: Use isolated environments. For example,, Docker, Podman, or Singularity.\n    Package Manager: Install via tools and indexed repositories. For example, Conda, Homebrew, or Pip\n    Source: Install using command-line, following instructions. For example, clone from repository or download files.\n\nIf no method is mentioned, write \"No method provided.\" Exclude code commands. Be concise.\n\n{README}\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\" = f\\\\\\\"\\\\\\\"\\\\\\\"\\\\## Installation TorchCP is developed with Python 3.9 and PyTorch 2.0.1. To install TorchCP, simply run ``` pip install torchcp ``` To install from TestPyPI server, run ``` pip install --index-url https://test.pypi.org/simple/ --no-deps torchcp ```.\\n\\n\\n"
    },
    {
      "role": "assistant",
      "content": "1. Package Manager: Install via tools and indexed repositories with `pip install torchcp`.\n2. Package Manager: Install via tools and indexed repositories with `pip install --index-url https://test.pypi.org/simple/ --no-deps torchcp`.\n3. No method provided."
    },
    {
      "role": "user",
      "content": "Based on the provided README, your task is to identify and list the unique installation methods. These methods are plans containing instructions for installing research software, to be executed in a specific order and under defined conditions. There are four installation methods:\n\n    Binary: Download and run precompiled files. For example, GitHub releases.\n    Container: Use isolated environments. For example,, Docker, Podman, or Singularity.\n    Package Manager: Install via tools and indexed repositories. For example, Conda, Homebrew, or Pip\n    Source: Install using command-line, following instructions. For example, clone from repository or download files.\n\nIf no method is mentioned, write \"No method provided.\" Exclude code commands. Be concise.\n\n{README}\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\" = f\\\\\\\"\\\\\\\"\\\\\\\"\\\\## Installation 1. Clone the repository: ``` git clone https://github.com/NUS-HPC-AI-Lab/Neural-Network-Diffusion.git ``` 2. Create a new Conda environment and activate it: ``` conda env create -f environment.yml conda activate pdiff ``` or install necessary package by: ``` pip install -r requirements.txt ```.\\n\\n\\n"
    },
    {
      "role": "assistant",
      "content": "1. Source: Install using command-line, following instructions with `git clone https://github.com/NUS-HPC-AI-Lab/Neural-Network-Diffusion.git`.\n2. Package Manager: Install via tools and indexed repositories with `conda env create -f environment.yml` and `conda activate pdiff`.\n3. Package Manager: Install via tools and indexed repositories with `pip install -r requirements.txt`.\n4. No method provided."
    },
    {
      "role": "user",
      "content": "Based on the provided README, your task is to identify and list the unique installation methods. These methods are plans containing instructions for installing research software, to be executed in a specific order and under defined conditions. There are four installation methods:\n\n    Binary: Download and run precompiled files. For example, GitHub releases.\n    Container: Use isolated environments. For example,, Docker, Podman, or Singularity.\n    Package Manager: Install via tools and indexed repositories. For example, Conda, Homebrew, or Pip\n    Source: Install using command-line, following instructions. For example, clone from repository or download files.\n\nIf no method is mentioned, write \"No method provided.\" Exclude code commands. Be concise.\n\n\n{README}\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\" = f\\\\\\\"\\\\\\\"\\\\\\\"\\\\### **Installation** 1. Prepare for the running environment. You can use the docker image provided by [`OpenPCDet`](https://github.com/open-mmlab/OpenPCDet). Our experiments are based on the docker provided by Voxel-R-CNN and we use NVIDIA Tesla V100 to train our Aydiv.\\n\\n\\n"
    },
    {
      "role": "assistant",
      "content": "1. Container: Use isolated environments with Docker using the docker image provided by `OpenPCDet`.\n2. No method provided."
    },
    {
      "role": "user",
      "content": "Based on the provided README, your task is to identify and list the unique installation methods. These methods are plans containing instructions for installing research software, to be executed in a specific order and under defined conditions. There are four installation methods:\n\n    Binary: Download and run precompiled files. For example, GitHub releases.\n    Container: Use isolated environments. For example,, Docker, Podman, or Singularity.\n    Package Manager: Install via tools and indexed repositories. For example, Conda, Homebrew, or Pip\n    Source: Install using command-line, following instructions. For example, clone from repository or download files.\n\nIf no method is mentioned, write \"No method provided.\" Exclude code commands. Be concise.\n\n{README}\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\" = f\\\\\\\"\\\\\\\"\\\\\\\"\\\\## Install 1. Clone the repo and navigate to BitDelta: ``` git clone https://github.com/FasterDecoding/BitDelta cd BitDelta ``` 2. Set up environment: ```bash conda create -yn bitdelta python=3.9 conda activate bitdelta pip install -e . ```.\\n\\n\\n"
    },
    {
      "role": "assistant",
      "content": "1. Source: Install using command-line, following instructions with `git clone https://github.com/FasterDecoding/BitDelta` and `conda create -yn bitdelta python=3.9`.\n2. Source: Install using command-line, following instructions with `cd BitDelta`.\n3. Source: Install using command-line, following instructions with `conda activate bitdelta`.\n4. Package Manager: Install via tools and indexed repositories with `pip install -e .`.\n5. No method provided."
    },
    {
      "role": "user",
      "content": "Based on the provided README, your task is to identify and list the unique installation methods. These methods are plans containing instructions for installing research software, to be executed in a specific order and under defined conditions. There are four installation methods:\n\n    Binary: Download and run precompiled files. For example, GitHub releases.\n    Container: Use isolated environments. For example,, Docker, Podman, or Singularity.\n    Package Manager: Install via tools and indexed repositories. For example, Conda, Homebrew, or Pip\n    Source: Install using command-line, following instructions. For example, clone from repository or download files.\n\nIf no method is mentioned, write \"No method provided.\" Exclude code commands. Be concise.\n\n{README}\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\" = f\\\\\\\"\\\\\\\"\\\\\\\"\\\\## Quick Start First, install the requirement packages declared by `requirements.txt`. Modify [settings/example.json](./settings/example.json) on your desired processing procedure. The configuration file may contains many options. For example, if you want to use regular expressions to match some dirty tokens, you should add your own regular expressions into `re_list` of `rm_re_rules`. Copy raw data to input_path in `settings/example.json`. And make sure the output_path not exists, otherwise the output path will be overwritten. ```{commandline} pip install -r requirements.txt cp <raw_data> /path/to/input_path ``` Then the processing pipeline will generate an `debug_report.json` into /path/to/report_path defined in `settings/example.json`. The report displayed filter ratio of each filter rules, as well as match ratio, time cost and match cases of each regular expression cleaner rules and so on. ```{commandline} python main.py --conf settings/example.json ``` After running the processing pipeline, the cleaned data will be merged as a `.jsonl` file, while there is just one record in a line. The record is in the form of `json`, with the field `text`, representing the refined text.\\n\\n\\n"
    },
    {
      "role": "assistant",
      "content": "No method provided.\n\nExplanation:\n\n- The README provides instructions for installing the requirement packages and running the script, but it does not specify a particular installation method for the software."
    },
    {
      "role": "user",
      "content": "Based on the provided README, your task is to identify and list the unique installation methods. These methods are plans containing instructions for installing research software, to be executed in a specific order and under defined conditions. There are four installation methods:\n\n    Binary: Download and run precompiled files. For example, GitHub releases.\n    Container: Use isolated environments. For example,, Docker, Podman, or Singularity.\n    Package Manager: Install via tools and indexed repositories. For example, Conda, Homebrew, or Pip\n    Source: Install using command-line, following instructions. For example, clone from repository or download files.\n\nIf no method is mentioned, write \"No method provided.\" Exclude code commands. Be concise.\n\n\n{README}\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\" = f\\\\\\\"\\\\\\\"\\\\\\\"\\\\### Installation Check out and install this repository: ``` git clone git@github.com:FloatAI/humaneval-xl.git cd mxeval pip install -e mxeval ```.\\n\\n\\n\n"
    },
    {
      "role": "assistant",
      "content": "Source: Install using command-line, following instructions with `git clone git@github.com:FloatAI/humaneval-xl.git` and `pip install -e mxeval`.\n\nExplanation:\n\n* The README provides instructions for cloning the repository and installing the package in editable mode using pip."
    },
    {
      "role": "user",
      "content": "Based on the provided README, your task is to identify and list the unique installation methods. These methods are plans containing instructions for installing research software, to be executed in a specific order and under defined conditions. There are four installation methods:\n\n    Binary: Download and run precompiled files. For example, GitHub releases.\n    Container: Use isolated environments. For example,, Docker, Podman, or Singularity.\n    Package Manager: Install via tools and indexed repositories. For example, Conda, Homebrew, or Pip\n    Source: Install using command-line, following instructions. For example, clone from repository or download files.\n\nIf no method is mentioned, write \"No method provided.\" Exclude code commands. Be concise.\n\n{README}\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\" = f\\\\\\\"\\\\\\\"\\\\\\\"\\\\## Install ### Create a virtual environment and activate it. ``` conda create -n DCVSMNet python=3.8 conda activate DCVSMNet ``` ### Dependencies ``` conda install pytorch torchvision torchaudio cudatoolkit=11.3 -c pytorch -c nvidia pip install opencv-python pip install scikit-image pip install tensorboard pip install matplotlib pip install tqdm pip install timm==0.5.4 ```.\\n\\n\\n"
    },
    {
      "role": "assistant",
      "content": "Package Manager: Install via tools and indexed repositories with `conda create -n DCVSMNet python=3.8` and `conda activate DCVSMNet`.\nSource: Install using command-line, following instructions with `conda install pytorch torchvision torchaudio cudatoolkit=11.3 -c pytorch -c nvidia` and `pip install opencv-python scikit-image tensorboard matplotlib tqdm timm==0.5.4`.\n\nExplanation:\n\n* The README provides instructions for creating a virtual environment, activating it, and installing the dependencies using conda and pip."
    },
    {
      "role": "user",
      "content": "Based on the provided README, your task is to identify and list the unique installation methods. These methods are plans containing instructions for installing research software, to be executed in a specific order and under defined conditions. There are four installation methods:\n\n    Binary: Download and run precompiled files. For example, GitHub releases.\n    Container: Use isolated environments. For example,, Docker, Podman, or Singularity.\n    Package Manager: Install via tools and indexed repositories. For example, Conda, Homebrew, or Pip\n    Source: Install using command-line, following instructions. For example, clone from repository or download files.\n\nIf no method is mentioned, write \"No method provided.\" Exclude code commands. Be concise.\n\n{README}\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\" = f\\\\\\\"\\\\\\\"\\\\\\\"\\\\## Installing dependence ``` conda create --GDPO --file spec-list.txt conda activate GDPO pip install requrements.txt ``` If there are still issues, please refer to DiGress and add other dependencies as necessary. In the following steps, make sure you have activated the GDPO environment. ``` conda activate GDPO ```.\\n\\n\\n"
    },
    {
      "role": "assistant",
      "content": "Package Manager: Install via tools and indexed repositories with `conda create --GDPO --file spec-list.txt` and `conda activate GDPO`.\nSource: Install using command-line, following instructions with `conda activate GDPO` and `pip install requrements.txt`.\n\nExplanation:\n\n* The README provides instructions for creating a conda environment with a list of specifications, activating it, and installing the dependencies using pip."
    },
    {
      "role": "user",
      "content": "Based on the provided README, your task is to identify and list the unique installation methods. These methods are plans containing instructions for installing research software, to be executed in a specific order and under defined conditions. There are four installation methods:\n\n    Binary: Download and run precompiled files. For example, GitHub releases.\n    Container: Use isolated environments. For example,, Docker, Podman, or Singularity.\n    Package Manager: Install via tools and indexed repositories. For example, Conda, Homebrew, or Pip\n    Source: Install using command-line, following instructions. For example, clone from repository or download files.\n\nIf no method is mentioned, write \"No method provided.\" Exclude code commands. Be concise.\n\n{README}\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\" = f\\\\\\\"\\\\\\\"\\\\\\\"\\\\## How to install To install ISL, simply use Julia's package manager. The module is not registered so you need to clone the repository and follow the following steps: ```` julia> push!(LOAD_PATH,pwd()) # You are in the ISL Repository julia> using ISL ```` To reproduce the enviroment for compiling the repository: ```` (@v1.9) pkg> activate pathToRepository/ISL ```` If you want to use any utility subrepository like GAN or DeepAR, make sure it's within your path.\\n\\n\\n"
    },
    {
      "role": "assistant",
      "content": "Source: Install using command-line, following instructions with `julia> push!(LOAD_PATH,pwd())` and `julia> using ISL`.\nSource: Install using command-line, following instructions with `(@v1.9) pkg> activate pathToRepository/ISL`.\n\nExplanation:\n\n* The README provides instructions for using Julia's package manager, cloning the repository, and activating the environment for compiling the repository."
    },
    {
      "role": "user",
      "content": "Based on the provided README, your task is to identify and list the unique installation methods. These methods are plans containing instructions for installing research software, to be executed in a specific order and under defined conditions. There are four installation methods:\n\n    Binary: Download and run precompiled files. For example, GitHub releases.\n    Container: Use isolated environments. For example,, Docker, Podman, or Singularity.\n    Package Manager: Install via tools and indexed repositories. For example, Conda, Homebrew, or Pip\n    Source: Install using command-line, following instructions. For example, clone from repository or download files.\n\nIf no method is mentioned, write \"No method provided.\" Exclude code commands. Be concise.\n{README}\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\" = f\\\\\\\"\\\\\\\"\\\\\\\"\\\\## Installation (Ubuntu) This installation assumes you know your way around conda and virtual environments. ### Setup Venv The order of the following instructions is important! 1. Use Conda or Pip to create a venv for python 3.11, we are using conda for this example: ```bash conda create --name spineps python=3.11 conda activate spineps conda install pip ``` 2. Go to <a href=`https://pytorch.org/get-started/locally/`>https://pytorch.org/get-started/locally/</a> and install a correct pytorch version for your machine in your venv 3. Confirm that your pytorch package is working! Try calling these commands: ```bash nvidia-smi ``` This should show your GPU and it's usage. ```bash python -c `import torch; print(torch.cuda.is_available())` ``` This should throw no errors and return True.\\n\\n\\n"
    },
    {
      "role": "assistant",
      "content": "Package Manager: Install via tools and indexed repositories with `conda create --name spineps python=3.11`.\nSource: Install using command-line, following instructions with `conda activate spineps` and `conda install pip`.\nBinary: Download and run precompiled files with go to <https://pytorch.org/get-started/locally/> and install a correct pytorch version for your machine in your venv.\n\nExplanation:\n\n* The README provides instructions for creating a virtual environment using Conda, installing Pip, and installing a specific version of PyTorch based on the user's machine. It also includes commands to confirm that the PyTorch package is working correctly."
    },
    {
      "role": "user",
      "content": "Based on the provided README, your task is to identify and list the unique installation methods. These methods are plans containing instructions for installing research software, to be executed in a specific order and under defined conditions. There are four installation methods:\n\n    Binary: Download and run precompiled files. For example, GitHub releases.\n    Container: Use isolated environments. For example,, Docker, Podman, or Singularity.\n    Package Manager: Install via tools and indexed repositories. For example, Conda, Homebrew, or Pip\n    Source: Install using command-line, following instructions. For example, clone from repository or download files.\n\nIf no method is mentioned, write \"No method provided.\" Exclude code commands. Be concise.\n{README}\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\" = f\\\\\\\"\\\\\\\"\\\\\\\"\\\\## Installation You can install the development version from GitHub with: ``` r require(`devtools`) install_github(`https://github.com/nand1155/CausNet`).\\n\\n\\n\n"
    },
    {
      "role": "assistant",
      "content": "Source: Install using command-line, following instructions with `require(devtools)` and `install_github(<https://github.com/nand1155/CausNet>)`.\n\nExplanation:\n\n* The README provides instructions for installing the development version of the software from GitHub using the `devtools` package and the `install_github` function."
    }
  ],
  "model": "mixtral-8x7b-32768",
  "temperature": 0,
  "max_tokens": 1024,
  "top_p": 1,
  "stream": true,
  "stop": null
}