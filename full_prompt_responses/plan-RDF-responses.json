[
  {
    "id": "1",
    "response": "Sure, I can help you extract the installation instructions for each method as specified. Here they are:\n\nBinary (for OS X & Linux):\n1. Follow the instructions at <https://sicstus.sics.se/download4.html> to download and install SICStus Prolog.\n2. Clone the DALI repository from <https://github.com/AAAI-DISIM-UnivAQ/DALI.git>.\n3. Navigate to the Examples/advanced directory in the DALI repository.\n4. Run the command `bash startmas.sh` to start DALI.\n\nBinary (for Windows):\n1. Follow the instructions at <https://sicstus.sics.se/download4.html> to download and install SICStus Prolog.\n2. Download the DALI repository as a zip file from <https://github.com/AAAI-DISIM-UnivAQ/DALI.git>.\n3. Unzip the repository and navigate to the DALI/Examples/basic directory.\n4. Double-click the 'startmas.bat' file to start DALI.\n\nContainer: Not provided.\n\nPackage Manager: Not provided.\n\nSource (for OS X & Linux):\n1. Follow the instructions at <https://sicstus.sics.se/download4.html> to download and install SICStus Prolog.\n2. Clone the DALI repository from <https://github.com/AAAI-DISIM-UnivAQ/DALI.git>.\n3. Navigate to the Examples/advanced directory in the DALI repository.\n4. Run the command `bash startmas.sh` to start DALI.\n\nSource (for Windows):\n1. Follow the instructions at <https://sicstus.sics.se/download4.html> to download and install SICStus Prolog.\n2. Download the DALI repository as a zip file from <https://github.com/AAAI-DISIM-UnivAQ/DALI.git>.\n3. Unzip the repository and navigate to the DALI/Examples/basic directory.\n4. Double-click the 'startmas.bat' file to start DALI.",
    "answers": [
      "Source"
    ],
    "prompt": " \n        Given the following README, extract the installation instructions for each installation method.         These methods are plans containing instructions for installing research software, to be executed in a sequential order and under defined conditions. These are:     Binary: Download and run precompiled files. For example, GitHub releases.     Container: Use isolated environments. For example,, Docker, Podman, or Singularity.     Package Manager: Install via tools and indexed repositories. For example, Conda, Homebrew, or Pip     Source: Install using command-line, following instructions. For example, clone from repository or download files.         Perform the following actions. For each Readme:\n         1. Extract the installation instructions for each method           2. For each installation method return a list, where each element of the list is an instruction, in sequential order         Do not add code commands in the list. Be concise. \n        Readme:\n        ```## Installation **OS X & Linux:** 1. To download and install SICStus Prolog (it is needed), follow the instructions at https://sicstus.sics.se/download4.html. 2. Then, you can download DALI and test it by running an example DALI MAS: ```sh git clone https://github.com/AAAI-DISIM-UnivAQ/DALI.git cd DALI/Examples/advanced bash startmas.sh ``` &nbsp;&nbsp;&nbsp;&nbsp; You will see different windows opening: * &nbsp;&nbsp;&nbsp;&nbsp; Prolog LINDA server (active_server_wi.pl) * &nbsp;&nbsp;&nbsp;&nbsp; Prolog FIPA client (active_user_wi.pl) * &nbsp;&nbsp;&nbsp;&nbsp; 1 instance of DALI metaintepreter for each agent (active_dali_wi.pl) **Windows:** 1. To download and install SICStus Prolog (it is needed), follow the instructions at https://sicstus.sics.se/download4.html. 2. Then, you can download DALI from https://github.com/AAAI-DISIM-UnivAQ/DALI.git. 3. Unzip the repository, go to the folder 'DALI/Examples/basic', and test if DALI works by duble clicking 'startmas.bat' file (this will launch an example DALI MAS). \n\n &nbsp;&nbsp;&nbsp;&nbsp; You will see different windows opening: * &nbsp;&nbsp;&nbsp;&nbsp; Prolog LINDA server (active_server_wi.pl) * &nbsp;&nbsp;&nbsp;&nbsp; Prolog FIPA client (active_user_wi.pl) * &nbsp;&nbsp;&nbsp;&nbsp; 1 instance of DALI metaintepreter for each agent (active_dali_wi.pl)``` \n        "
  },
  {
    "id": "2",
    "response": "1. Extract the installation instructions for each method:\n\n- Binary: Not provided in the README.\n- Container: Not provided in the README.\n- Package Manager: Not provided in the README.\n- Source:\n  - The `setup.py` file contains installation instructions.\n\n2. For each installation method return a list, where each element of the list is an instruction, in sequential order:\n\n- Source:\n  - Refer to the `setup.py` file for installation instructions.\n\nNote: The `setup.py` file should contain the installation instructions for the source method. However, the README provided does not have explicit instructions for any installation method. It is recommended to include the installation instructions directly in the README or provide more information in the `setup.py` file.",
    "answers": [
      "Source"
    ],
    "prompt": " \n        Given the following README, extract the installation instructions for each installation method.         These methods are plans containing instructions for installing research software, to be executed in a sequential order and under defined conditions. These are:     Binary: Download and run precompiled files. For example, GitHub releases.     Container: Use isolated environments. For example,, Docker, Podman, or Singularity.     Package Manager: Install via tools and indexed repositories. For example, Conda, Homebrew, or Pip     Source: Install using command-line, following instructions. For example, clone from repository or download files.         Perform the following actions. For each Readme:\n         1. Extract the installation instructions for each method           2. For each installation method return a list, where each element of the list is an instruction, in sequential order         Do not add code commands in the list. Be concise. \n        Readme:\n        ```## Installation \n Please refer to the `setup.py` file for installation instructions.``` \n        "
  },
  {
    "id": "3",
    "response": "Binary:\n\n1. Download the dataset folder from the provided link: <https://portland-my.sharepoint.com/:u:/g/personal/liuhui3-c_my_cityu_edu_hk/EfApQlFP3PhFjUW4527STo0BALMdP16zs-HPMNgwQVFWsA?e=zoHlW2>\n2. Unzip the downloaded folder into the project directory.\n\nPackage Manager (Conda):\n\n1. Create a new Conda environment.\n2. Activate the Conda environment.\n3. Run `conda install -c anaconda python=3.7` to install Python 3.7.\n4. Install required libraries, such as `pip install -r requirements.txt`.\n\nSource:\n\n1. Clone the repository or download the files.\n2. Place your OpenAI key into the file named `api_key.txt`. The format should be `openai.api_key = 'your_openai_key'`.\n\n(The source installation method doesn't have specific instructions for the provided README.)",
    "answers": [
      "Source"
    ],
    "prompt": " \n        Given the following README, extract the installation instructions for each installation method.         These methods are plans containing instructions for installing research software, to be executed in a sequential order and under defined conditions. These are:     Binary: Download and run precompiled files. For example, GitHub releases.     Container: Use isolated environments. For example,, Docker, Podman, or Singularity.     Package Manager: Install via tools and indexed repositories. For example, Conda, Homebrew, or Pip     Source: Install using command-line, following instructions. For example, clone from repository or download files.         Perform the following actions. For each Readme:\n         1. Extract the installation instructions for each method           2. For each installation method return a list, where each element of the list is an instruction, in sequential order         Do not add code commands in the list. Be concise. \n        Readme:\n        ```## Getting Started Step 1: Download the dataset folder from onedrive by [data.zip](https://portland-my.sharepoint.com/:u:/g/personal/liuhui3-c_my_cityu_edu_hk/EfApQlFP3PhFjUW4527STo0BALMdP16zs-HPMNgwQVFWsA?e=zoHlW2). Unzip this folder into the project directory. You can find four orginal datasets, pre-processed datasets (i.e., val.jsonl, test.jsonl, train.jsonl in each dataset folder) and the files incuding questions and answers Step 2: Place you OpenAI key into the file named api_key.txt. ``` openai.api_key = ````` \n        "
  },
  {
    "id": "4",
    "response": "1. Extract the installation instructions for each method\n\nBinary: Not provided in this README\n\nContainer:\n- Build the docker image: `docker build -t steam_icp --build-arg USERID=$(id -u) --build-arg GROUPID=$(id -g) --build-arg USERNAME=$(whoami) --build-arg HOMEDIR=${HOME} .`\n- Start a docker container: `docker run -it --name steam_icp --privileged --network=host -e DISPLAY=$DISPLAY -v /tmp/.X11-unix:/tmp/.X11-unix -v ${HOME}:${HOME}:rw steam_icp`\n\nPackage Manager: Not provided in this README\n\nSource:\n- Clone the repository: Already done as the first step in the README\n- Build STEAM-ICP: `bash build.sh` (This command should be executed inside the container)\n\n2. For each installation method return a list, where each element of the list is an instruction, in sequential order\n\nBinary: Not applicable for this README\n\nContainer:\n- [\"docker build -t steam\\_icp --build-arg USERID=$(id -u) --build-arg GROUPID=$(id -g) --build-arg USERNAME=$(whoami) --build-arg HOMEDIR=${HOME} .\"]\n- [\"docker run -it --name steam\\_icp --privileged --network=host -e DISPLAY=$DISPLAY -v /tmp/.X11-unix:/tmp/.X11-unix -v ${HOME}:${HOME}:rw steam\\_icp\"]\n\nPackage Manager: Not applicable for this README\n\nSource:\n- [\"git clone <repository\\_url>\"]\n- [\"bash build.sh\"] (This command should be executed inside the container)",
    "answers": [
      "Source"
    ],
    "prompt": " \n        Given the following README, extract the installation instructions for each installation method.         These methods are plans containing instructions for installing research software, to be executed in a sequential order and under defined conditions. These are:     Binary: Download and run precompiled files. For example, GitHub releases.     Container: Use isolated environments. For example,, Docker, Podman, or Singularity.     Package Manager: Install via tools and indexed repositories. For example, Conda, Homebrew, or Pip     Source: Install using command-line, following instructions. For example, clone from repository or download files.         Perform the following actions. For each Readme:\n         1. Extract the installation instructions for each method           2. For each installation method return a list, where each element of the list is an instruction, in sequential order         Do not add code commands in the list. Be concise. \n        Readme:\n        ```## Installation Clone this repository and its submodules. We use docker to install dependencies The recommended way to build the docker image is ```bash docker build -t steam_icp \n --build-arg USERID=$(id -u) \n --build-arg GROUPID=$(id -g) \n --build-arg USERNAME=$(whoami) \n --build-arg HOMEDIR=${HOME} . ``` When starting a container, remember to mount the code, dataset, and output directories to proper locations in the container. An example command to start a docker container with the image is ```bash docker run -it --name steam_icp \n --privileged \n --network=host \n -e DISPLAY=$DISPLAY \n -v /tmp/.X11-unix:/tmp/.X11-unix \n -v ${HOME}:${HOME}:rw \n steam_icp ``` (Inside Container) Go to the root directory of this repository and build STEAM-ICP ```bash bash build.sh `````` \n        "
  },
  {
    "id": "5",
    "response": "Binary:\n[ ] Download and run precompiled files. (This method is not provided in the README)\n\nContainer:\n[ ] Use isolated environments. (This method is not provided in the README)\n\nPackage Manager:\n[ ] Make sure you have Python, Pip and R installed.\n[ ] Install the python dependencies with `pip3 install -r requirements.txt`\n[ ] Install the `pygirgs` package at <https://github.com/PFischbeck/pygirgs>\n[ ] Install the R dependencies (used for plots) with `R -e 'install.packages(c(ggplot2, reshape2, plyr, dplyr, scales), repos=https://cloud.r-project.org/)'`\n\nSource:\n[ ] Clone the repository or download the files.\n[ ] Download the file `konect-data.zip` from <https://doi.org/10.5281/zenodo.10629451> and extract its contents into the folder `input_data/konect`\n[ ] Optional: Download the file `output-data.zip` from <https://doi.org/10.5281/zenodo.10629451> and extract its contents into the folder `output_data`.",
    "answers": [
      "Source"
    ],
    "prompt": " \n        Given the following README, extract the installation instructions for each installation method.         These methods are plans containing instructions for installing research software, to be executed in a sequential order and under defined conditions. These are:     Binary: Download and run precompiled files. For example, GitHub releases.     Container: Use isolated environments. For example,, Docker, Podman, or Singularity.     Package Manager: Install via tools and indexed repositories. For example, Conda, Homebrew, or Pip     Source: Install using command-line, following instructions. For example, clone from repository or download files.         Perform the following actions. For each Readme:\n         1. Extract the installation instructions for each method           2. For each installation method return a list, where each element of the list is an instruction, in sequential order         Do not add code commands in the list. Be concise. \n        Readme:\n        ```# Installation - Make sure you have Python, Pip and R installed. - Checkout this repository - Install the python dependencies with ``` pip3 install -r requirements.txt ``` - Install the `pygirgs` package at https://github.com/PFischbeck/pygirgs - Install the R dependencies (used for plots) with ``` R -e 'install.packages(c(ggplot2, reshape2, plyr, dplyr, scales), repos=https://cloud.r-project.org/)' ``` - Download the file `konect-data.zip` from [Zenodo](https://doi.org/10.5281/zenodo.10629451) and extract its contents into the folder `input_data/konect` - Optional: Download the file `output-data.zip` from [Zenodo](https://doi.org/10.5281/zenodo.10629451) and extract its contents into the folder `output_data`. This way, you can access all experiment results without running them yourself.``` \n        "
  },
  {
    "id": "6",
    "response": "1. Extract the installation instructions for each method\n- Binary: Not present in the README\n- Container: Not present in the README\n- Package Manager:\n[\n\"Install the package requirements using pip:\",\n\"pip install -r requirements.txt\"\n]\n- Source: Not present in the README\n\n2. For each installation method return a list, where each element of the list is an instruction, in sequential order\n- Package Manager:\n[\n\"Install the package requirements using pip:\",\n\"pip install -r requirements.txt\"\n]\n\nNote: The README only includes instructions for the Package Manager method, specifically using pip to install the required packages from a file named \"requirements.txt\".",
    "answers": [
      "Source"
    ],
    "prompt": " \n        Given the following README, extract the installation instructions for each installation method.         These methods are plans containing instructions for installing research software, to be executed in a sequential order and under defined conditions. These are:     Binary: Download and run precompiled files. For example, GitHub releases.     Container: Use isolated environments. For example,, Docker, Podman, or Singularity.     Package Manager: Install via tools and indexed repositories. For example, Conda, Homebrew, or Pip     Source: Install using command-line, following instructions. For example, clone from repository or download files.         Perform the following actions. For each Readme:\n         1. Extract the installation instructions for each method           2. For each installation method return a list, where each element of the list is an instruction, in sequential order         Do not add code commands in the list. Be concise. \n        Readme:\n        ```## Installation pip install -r requirements.txt *Note: I did not us a virtual environment so the packages in the requirements.txt file are probably not reflective of all the packages used in this project. If some issues pop up please don't hesitate to email me at: gpinto@usc.edu*``` \n        "
  },
  {
    "id": "7",
    "response": "1. Binary: Not present in the README\n2. Container: Not present in the README\n3. Package Manager:\n- Initialize git submodules with `git submodule init`\n- Update git submodules with `git submodule update`\n- Create a new conda environment named 'gsft' with Python 3.9\n- Activate the 'gsft' conda environment\n- Install required packages from `requirements.txt` using pip\n4. Source:\n- Clone or download the repository or files\n- Add the following lines to the `~/.bashrc` to define the Python paths:\n```\nexport GSFT_PATH=/path_to_gsfc\nexport PYTHONPATH=$PYTHONPATH:/$GSFT_PATH\n```",
    "answers": [
      "Source"
    ],
    "prompt": " \n        Given the following README, extract the installation instructions for each installation method.         These methods are plans containing instructions for installing research software, to be executed in a sequential order and under defined conditions. These are:     Binary: Download and run precompiled files. For example, GitHub releases.     Container: Use isolated environments. For example,, Docker, Podman, or Singularity.     Package Manager: Install via tools and indexed repositories. For example, Conda, Homebrew, or Pip     Source: Install using command-line, following instructions. For example, clone from repository or download files.         Perform the following actions. For each Readme:\n         1. Extract the installation instructions for each method           2. For each installation method return a list, where each element of the list is an instruction, in sequential order         Do not add code commands in the list. Be concise. \n        Readme:\n        ```## Installation ### Dependencies Initialize git submodules with ``` git submodule init git submodule update ``` ### Python environment Install the specific versions of every package from `requirements.txt` in a new conda environment: ``` conda create --name gsft python=3.9 conda activate gsft pip install -r requirements.txt ``` To ensure that Python paths are properly defined, update the `~/.bashrc` by adding the following lines ``` export GSFT_PATH=/path_to_gsfc export PYTHONPATH=$PYTHONPATH:/$GSFT_PATH `````` \n        "
  },
  {
    "id": "8",
    "response": "1. Extract the installation instructions for each method:\n\n- Binary: Not provided in the README.\n- Container: Not provided in the README.\n- Package Manager:\n[0] Run the following command to install the required packages:\n```\npip install -r requirements.txt\n```\n- Source: Not provided in the README.\n\n2. For each installation method return a list, where each element of the list is an instruction, in sequential order:\n\nBinary:\n- Not applicable (N/A)\n\nContainer:\n- N/A\n\nPackage Manager:\n- [0] Run the following command to install the required packages:\n  ```\n  pip install -r requirements.txt\n  ```\n\nSource:\n- N/A",
    "answers": [
      "Source"
    ],
    "prompt": " \n        Given the following README, extract the installation instructions for each installation method.         These methods are plans containing instructions for installing research software, to be executed in a sequential order and under defined conditions. These are:     Binary: Download and run precompiled files. For example, GitHub releases.     Container: Use isolated environments. For example,, Docker, Podman, or Singularity.     Package Manager: Install via tools and indexed repositories. For example, Conda, Homebrew, or Pip     Source: Install using command-line, following instructions. For example, clone from repository or download files.         Perform the following actions. For each Readme:\n         1. Extract the installation instructions for each method           2. For each installation method return a list, where each element of the list is an instruction, in sequential order         Do not add code commands in the list. Be concise. \n        Readme:\n        ```## Installation The project can be installed by running the following command in your terminal: ```bash pip install -r requirements.txt `````` \n        "
  },
  {
    "id": "9",
    "response": "1. Binary:\n- There are no binary installation instructions provided.\n2. Container:\n- There are no container installation instructions provided.\n3. Package Manager:\n- conda install fastp=0.12.4\n- conda install trinity=2.8.5\n- conda install diamond=2.0.11.149\n- conda install ragtag=2.1.0\n- conda install quast=5.0.2\n4. Source:\n- git clone <https://github.com/viralInformatics/VIGA.git> or download ZIP to local\n- download taxdmp.zip from <https://ftp.ncbi.nlm.nih.gov/pub/taxonomy/> and unzip\n- download prot.accession2taxid from <https://ftp.ncbi.nlm.nih.gov/pub/taxonomy/accession2taxid/>\n- wget -c ftp.ncbi.nlm.nih.gov/refseq/release/viral/viral.1.protein.faa.gz\n- wget -c ftp://ftp.ncbi.nlm.nih.gov/blast/db/FASTA/nr.gz or ascp -T -i asperaweb_id_dsa.openssh --host=ftp.ncbi.nih.gov --user=anonftp --mode=recv /blast/db/FASTA/nr.gz ./\n- diamond makedb --in YourPath/RefSeqVirusProtein -d Diamond\\_RefSeqVirusProtein --taxonmap YourPath/prot.accession2taxid --taxonnodes YourPath/nodes.dmp\n- diamond makedb --in nr -d Dimond\\_nr --taxonmap YourPath/prot.accession2taxid --taxonnodes YourPath/nodes.dmp\n- pip install pandas=1.1.5\n- pip install numpy=1.19.5\n- pip install matplotlib=3.3.4\n- pip install biopython=1.79",
    "answers": [
      "Source"
    ],
    "prompt": " \n        Given the following README, extract the installation instructions for each installation method.         These methods are plans containing instructions for installing research software, to be executed in a sequential order and under defined conditions. These are:     Binary: Download and run precompiled files. For example, GitHub releases.     Container: Use isolated environments. For example,, Docker, Podman, or Singularity.     Package Manager: Install via tools and indexed repositories. For example, Conda, Homebrew, or Pip     Source: Install using command-line, following instructions. For example, clone from repository or download files.         Perform the following actions. For each Readme:\n         1. Extract the installation instructions for each method           2. For each installation method return a list, where each element of the list is an instruction, in sequential order         Do not add code commands in the list. Be concise. \n        Readme:\n        ```## Installation ### Step1: Download VIGA Download VIGA with Git from GitHub ``` git clone https://github.com/viralInformatics/VIGA.git ``` or Download ZIP to local ### Step 2: Download Database ``` 1. download taxdmp.zip [Index of /pub/taxonomy (nih.gov)](https://ftp.ncbi.nlm.nih.gov/pub/taxonomy/) and unzip taxdmp.zip and put it in ./db/ 2. download prot.accession2taxid file from https://ftp.ncbi.nlm.nih.gov/pub/taxonomy/accession2taxid/ 3. download RefSeqVirusProtein file from wget -c ftp.ncbi.nlm.nih.gov/refseq/release/viral/viral.1.protein.faa.gz gzip -d viral.1.protein.faa.gz mv viral.1.protein.faa RefSeqVirusProtein 4. download nr file from wget -c ftp://ftp.ncbi.nlm.nih.gov/blast/db/FASTA/nr.gz or ascp -T -i asperaweb_id_dsa.openssh --host=ftp.ncbi.nih.gov --user=anonftp --mode=recv /blast/db/FASTA/nr.gz ./ gzip -d nr.gz 5. Use Diamond v2.0.11.149 to create two separate databases as the indexing libraries in the current version are incompatible with each other. 6. In order to set up a reference database for DIAMOND, the makedb command needs to be executed with the following command line: diamond makedb --in YourPath/RefSeqVirusProtein -d Diamond_RefSeqVirusProtein --taxonmap YourPath/prot.accession2taxid --taxonnodes YourPath/nodes.dmp diamond makedb --in nr -d Dimond_nr --taxonmap YourPath/prot.accession2taxid --taxonnodes YourPath/nodes.dmp ``` ### Step 3: Installation of dependent software #### Installing Some Software Using Conda ``` conda install fastp=0.12.4 trinity=2.8.5 diamond=2.0.11.149 ragtag=2.1.0 quast=5.0.2 ``` #### Manual Installation of MetaCompass https://github.com/marbl/MetaCompass ### Step 4: Python Dependencies Base on python 3.6.8 ``` pip install pandas=1.1.5 numpy=1.19.5 matplotlib=3.3.4 biopython=1.79 `````` \n        "
  },
  {
    "id": "10",
    "response": "Based on the provided README, here are the installation instructions for each method:\n\n1. Binary:\n* Download the appropriate zip file for your operating system (Linux, Mac, or Windows)\n* Follow the instructions for your specific operating system:\n\t+ For Linux: run a bash command for the install.sh file in the installation folder\n\t+ For Mac: copy the NRN-EZ app to the Applications folder\n\t+ For Windows: run the installation wizard\n2. Container:\n* No instructions provided for container-based installation.\n3. Package Manager:\n* No instructions provided for package manager-based installation.\n4. Source:\n* No instructions provided for source-based installation.\n\nNote: The provided README only includes instructions for binary-based installation, and does not include instructions for container, package manager, or source-based installation.",
    "answers": [
      "Source"
    ],
    "prompt": " \n        Given the following README, extract the installation instructions for each installation method.         These methods are plans containing instructions for installing research software, to be executed in a sequential order and under defined conditions. These are:     Binary: Download and run precompiled files. For example, GitHub releases.     Container: Use isolated environments. For example,, Docker, Podman, or Singularity.     Package Manager: Install via tools and indexed repositories. For example, Conda, Homebrew, or Pip     Source: Install using command-line, following instructions. For example, clone from repository or download files.         Perform the following actions. For each Readme:\n         1. Extract the installation instructions for each method           2. For each installation method return a list, where each element of the list is an instruction, in sequential order         Do not add code commands in the list. Be concise. \n        Readme:\n        ```NRN-EZ was built with PyInstaller 3.6, and requires the following languages and libraries: \u2022 Python 3.6.9 and higher (currently up to 3.10) \u2022 PyQt 5.10.1 \u2022 PyQtGraph 0.11.0 Installation instructions for Linux (Ubuntu and Pop!_OS): download the Linux zip file and, from the command window, run a bash command for the install.sh file, in the corresponding installation folder. Installation instructions for Mac OS: download the Mac zip file and copy the NRN-EZ app to the Applications folder. Installation instructions for Windows: download the Win zip file and run the installation wizard.``` \n        "
  },
  {
    "id": "11",
    "response": "Binary:\n[ ] N/A\n\nContainer:\n[ ] N/A\n\nPackage Manager:\n1. Create a Python virtual environment with Conda:\n- 'conda create -n myenv python=3.10'\n- 'conda activate myenv'\n2. Install PyTorch 'v2.1.0' with compatible cuda version:\n- 'pip install torch==2.1.0 torchvision==0.16.0 torchaudio==2.1.0 --index-url https://download.pytorch.org/whl/cu118'\n3. Install Python dependencies:\n- 'pip install .'\n- 'pip install flash-attn --no-build-isolation'\n\nSource:\n1. Clone the repository or download the files.\n2. Login to your huggingface account for downloading models:\n- 'huggingface-cli login --token ${your_access_token}'",
    "answers": [
      "Source"
    ],
    "prompt": " \n        Given the following README, extract the installation instructions for each installation method.         These methods are plans containing instructions for installing research software, to be executed in a sequential order and under defined conditions. These are:     Binary: Download and run precompiled files. For example, GitHub releases.     Container: Use isolated environments. For example,, Docker, Podman, or Singularity.     Package Manager: Install via tools and indexed repositories. For example, Conda, Homebrew, or Pip     Source: Install using command-line, following instructions. For example, clone from repository or download files.         Perform the following actions. For each Readme:\n         1. Extract the installation instructions for each method           2. For each installation method return a list, where each element of the list is an instruction, in sequential order         Do not add code commands in the list. Be concise. \n        Readme:\n        ```## Setup The following steps provide the necessary setup to run our codes. 1. Create a Python virtual environment with Conda: ``` conda create -n myenv python=3.10 conda activate myenv ``` 2. Install PyTorch `v2.1.0` with compatible cuda version, following instructions from [PyTorch Installation Page](https://pytorch.org/get-started/locally/). For example with cuda 11: ``` pip install torch==2.1.0 torchvision==0.16.0 torchaudio==2.1.0 --index-url https://download.pytorch.org/whl/cu118 ``` 3. Install the following Python dependencies to run the codes. ``` python -m pip install . python -m pip install flash-attn --no-build-isolation ``` 4. Login to your huggingface account for downloading models ``` huggingface-cli login --token ${your_access_token} `````` \n        "
  },
  {
    "id": "12",
    "response": "1. Extract the installation instructions for each method:\n\n- Binary: Not provided.\n- Container: Not provided.\n- Package Manager:\n  - `pip install -r requirements.txt`\n- Source: Not provided.\n\n2. For each installation method return a list, where each element of the list is an instruction, in sequential order:\n\n- Binary: Not provided.\n- Container: Not provided.\n- Package Manager:\n  - Open a terminal.\n  - Navigate to the directory containing the `requirements.txt` file.\n  - Run `pip install -r requirements.txt`.\n- Source: Not provided.\n\nAdditional instructions:\n\n- Obtain an OpenAI API key and replace the placeholder in `config.py`.",
    "answers": [
      "Source"
    ],
    "prompt": " \n        Given the following README, extract the installation instructions for each installation method.         These methods are plans containing instructions for installing research software, to be executed in a sequential order and under defined conditions. These are:     Binary: Download and run precompiled files. For example, GitHub releases.     Container: Use isolated environments. For example,, Docker, Podman, or Singularity.     Package Manager: Install via tools and indexed repositories. For example, Conda, Homebrew, or Pip     Source: Install using command-line, following instructions. For example, clone from repository or download files.         Perform the following actions. For each Readme:\n         1. Extract the installation instructions for each method           2. For each installation method return a list, where each element of the list is an instruction, in sequential order         Do not add code commands in the list. Be concise. \n        Readme:\n        ```## Requirements The code has been tested with Python 3.9.13. Please first install the required packages by: ```bash pip install -r requirements.txt ``` You also need an OpenAI API key to run GeneGPT with Codex. Replace the placeholder with your key in `config.py`: ```bash $ cat config.py API_KEY = 'YOUR_OPENAI_API_KEY' `````` \n        "
  },
  {
    "id": "13",
    "response": "Docker installation (isolated):\n\n1. Install Docker on your machine.\n2. Move to the original directory `learning_to_fly`.\n3. Build the Docker image: `docker build -t arpllab/learning_to_fly .`\n4. Run it using: `docker run -it --rm -p 8000:8000 arpllab/learning_to_fly`\n5. (Optional) Build the container for building the firmware: `docker build -t arpllab/learning_to_fly_build_firmware -f Dockerfile_build_firmware .`\n6. (Optional) Run it using: `docker run -it --rm arpllab/learning_to_fly_build_firmware`\n7. (Optional) Run the benchmark: `docker run -it --rm arpllab/learning_to_fly training_benchmark`\n\nNative installation:\n\n1. Clone this repository: `git clone https://github.com/arplaboratory/learning-to-fly learning_to_fly`\n2. Instantiate the `RLtools` submodule: `git submodule update --init -- external/rl_tools`\n3. Instantiate some dependencies of `RLtools`: `git submodule update --init -- external/cli11 external/highfive external/json/ external/tensorboard tests/lib/googletest/`\n4. Install dependencies on Ubuntu:\na. `sudo apt update && sudo apt install libhdf5-dev libopenblas-dev protobuf-compiler libprotobuf-dev libboost-all-dev`\nb. Optionally, install Intel MKL instead of OpenBLAS.\n5. Install dependencies on macOS: `brew install hdf5 protobuf boost`\n6. Configure the build of the code (examples provided for Ubuntu and macOS).\n7. Build the targets: `cmake --build . -j8`\n8. Run the code: `./build/src/training_headless`\n9. Run Tensorboard: `tensorboard --logdir=logs`\n10. Run the training with the UI: `./build/src/ui 0.0.0.0 8000`\n11. Run the benchmark: `sudo nice -n -20 ./build/src/training_benchmark`",
    "answers": [
      "Source"
    ],
    "prompt": " \n        Given the following README, extract the installation instructions for each installation method.         These methods are plans containing instructions for installing research software, to be executed in a sequential order and under defined conditions. These are:     Binary: Download and run precompiled files. For example, GitHub releases.     Container: Use isolated environments. For example,, Docker, Podman, or Singularity.     Package Manager: Install via tools and indexed repositories. For example, Conda, Homebrew, or Pip     Source: Install using command-line, following instructions. For example, clone from repository or download files.         Perform the following actions. For each Readme:\n         1. Extract the installation instructions for each method           2. For each installation method return a list, where each element of the list is an instruction, in sequential order         Do not add code commands in the list. Be concise. \n        Readme:\n        ```### Docker installation (isolated) With the following instructions you can also easily build the Docker image yourself. If you want to run the code on bare metal jump [Native installation](#Native-installation). First, install Docker on your machine. Then move to the original directory `learning_to_fly` and build the Docker image: ``` docker build -t arpllab/learning_to_fly . ``` If desired you can also build the container for building the firmware: ``` docker build -t arpllab/learning_to_fly_build_firmware -f Dockerfile_build_firmware . ``` After that you can run it using e.g.: ``` docker run -it --rm -p 8000:8000 arpllab/learning_to_fly ``` This will open the port `8000` for the UI of the training program and run it inside the container. Navigate to [https://0.0.0.0:8000](https://0.0.0.0:8000) with your browser, and you should see something like in the screenshot above (after starting the training). The training UI configuration does not log data by default. If you want to inspect the training data run: ``` docker run -it --rm -p 6006:6006 arpllab/learning_to_fly training_headless ``` Navigate to [https://0.0.0.0:6006](https://0.0.0.0:6006) with your browser to investigate the Tensorboard logs. If you would like to benchmark the training speed you can use: ``` docker run -it --rm arpllab/learning_to_fly training_benchmark ``` This is the fastest configuration, without logging, UI, checkpointing etc. ### Native installation Clone this repository: ``` git clone https://github.com/arplaboratory/learning-to-fly learning_to_fly cd learning_to_fly ``` Then instantiate the `RLtools` submodule: ``` git submodule update --init -- external/rl_tools cd external/rl_tools ``` Then instantiate some dependencies of `RLtools` (for conveniences like checkpointing, Tensorboard logging, testing, etc.): ``` git submodule update --init -- external/cli11 external/highfive external/json/ external/tensorboard tests/lib/googletest/ ``` #### Install dependencies on Ubuntu ``` sudo apt update && sudo apt install libhdf5-dev libopenblas-dev protobuf-compiler libprotobuf-dev libboost-all-dev ``` As an alternative to openblas you can also install [Intel MKL](https://www.intel.com/content/www/us/en/developer/tools/oneapi/onemkl-download.html) which in our experience is significantly faster than OpenBLAS. #### Install dependencies on macOS ``` brew install hdf5 protobuf boost ``` Please make sure that `brew` links the libraries correctly. If not you might have to link e.g. `protobuf` manually using `brew link protobuf`. Going back to the main directory (`learning_to_fly`), we can now configure the build of the code: ``` cd ../../ mkdir build cd build ``` - Ubuntu + OpenBLAS: `cmake .. -DCMAKE_BUILD_TYPE=Release -DRL_TOOLS_BACKEND_ENABLE_OPENBLAS:BOOL=ON` - Ubuntu + MKL: `cmake .. -DCMAKE_BUILD_TYPE=Release -DRL_TOOLS_BACKEND_ENABLE_MKL:BOOL=ON` - macOS (tested on Sonoma): `cmake .. -DCMAKE_BUILD_TYPE=Release` Finally, we can build the targets: ``` cmake --build . -j8 ``` After successfully building the targets, we can run the code (in the original directory `learning_to_fly`): ``` cd .. ./build/src/training_headless ``` While this is running, you should be able to see training metrics using Tensorboard If not already installed: ``` python3 -m pip install tensorboard ``` Then from the original directory `learning_to_fly`: ``` tensorboard --logdir=logs ``` To run the training with the UI, we download the JavaScript dependencies in the form of the two files `three.module.js` and `OrbitControls.js`: ``` cd src/ui ./get_dependencies.sh ``` After that we can execute the UI binary from the root folder: ``` cd ../../ ./build/src/ui 0.0.0.0 8000 ``` Now you should be able to navigate to [http://0.0.0.0:8000](http://0.0.0.0:8000) in your browser and start the training. To run the benchmark (with UI, checkpointing and Tensorboard logging turned off): ``` sudo nice -n -20 ./build/src/training_benchmark `````` \n        "
  },
  {
    "id": "14",
    "response": "Binary:\n- There are no binary installation instructions provided.\n\nContainer:\n- This README does not provide installation instructions for using containers.\n\nPackage Manager:\n1. Create a new conda environment with Python 3.10:\n```\nconda create -n lwm python=3.10\n```\n2. Install Jax with CUDA 12 support and version 0.4.23:\n```\npip install -U `jax[cuda12_pip]==0.4.23`\n```\n3. Install the required packages from the provided requirements.txt file:\n```\npip install -r requirements.txt\n```\n\nSource:\n- There are no source installation instructions provided.\n\nAdditional instructions for setting up a TPU VM are provided, but they are not related to installing the software:\n\n```sh\ntpu_vm_setup.sh\n```",
    "answers": [
      "Source"
    ],
    "prompt": " \n        Given the following README, extract the installation instructions for each installation method.         These methods are plans containing instructions for installing research software, to be executed in a sequential order and under defined conditions. These are:     Binary: Download and run precompiled files. For example, GitHub releases.     Container: Use isolated environments. For example,, Docker, Podman, or Singularity.     Package Manager: Install via tools and indexed repositories. For example, Conda, Homebrew, or Pip     Source: Install using command-line, following instructions. For example, clone from repository or download files.         Perform the following actions. For each Readme:\n         1. Extract the installation instructions for each method           2. For each installation method return a list, where each element of the list is an instruction, in sequential order         Do not add code commands in the list. Be concise. \n        Readme:\n        ```## Setup This codebase is supported on Ubuntu and has not been tested on Windows or macOS. We recommend using TPUs for training and inference, although it is also possible to use GPUs. On TPU, the code is highly optimized with Jax's Pallas and can achieve high MFUs with RingAttention at very large context sizes. On GPU, the code is based on XLA and is not as optimized as it is for TPU. Install the requirements with: ``` conda create -n lwm python=3.10 pip install -U `jax[cuda12_pip]==0.4.23` -f https://storage.googleapis.com/jax-releases/jax_cuda_releases.html pip install -r requirements.txt ``` or set up TPU VM with: ``` sh tpu_vm_setup.sh `````` \n        "
  },
  {
    "id": "15",
    "response": "1. Binary: Not present in the README.\n2. Container: Not present in the README.\n3. Package Manager:\n- Create a conda environment with Python 3.10\n- Activate the created environment\n4. Source:\n- Clone the UFO repository\n- Navigate to the UFO directory\n- Install the requirements using pip\n\nNote: The first three instructions are for creating a conda environment and are specific to the Package Manager method. The last three instructions are for getting the source code and installing the requirements, which are common for all methods.",
    "answers": [
      "Source"
    ],
    "prompt": " \n        Given the following README, extract the installation instructions for each installation method.         These methods are plans containing instructions for installing research software, to be executed in a sequential order and under defined conditions. These are:     Binary: Download and run precompiled files. For example, GitHub releases.     Container: Use isolated environments. For example,, Docker, Podman, or Singularity.     Package Manager: Install via tools and indexed repositories. For example, Conda, Homebrew, or Pip     Source: Install using command-line, following instructions. For example, clone from repository or download files.         Perform the following actions. For each Readme:\n         1. Extract the installation instructions for each method           2. For each installation method return a list, where each element of the list is an instruction, in sequential order         Do not add code commands in the list. Be concise. \n        Readme:\n        ```## \u2728 Getting Started ### \ud83d\udee0\ufe0f Step 1: Installation UFO requires **Python >= 3.10** running on **Windows OS >= 10**. It can be installed by running the following command: ```bash # [optional to create conda environment] # conda create -n ufo python=3.10 # conda activate ufo # clone the repository git clone https://github.com/microsoft/UFO.git cd UFO # install the requirements pip install -r requirements.txt `````` \n        "
  },
  {
    "id": "16",
    "response": "1. Extract the installation instructions for each method\n\nBinary: Not provided in the README.\n\nContainer: Not provided in the README.\n\nPackage Manager:\n- [Install `torch` version 1.11.0](<https://download.pytorch.org/whl/torch_stable.html>)\n- `pip install mmyolo==0.6.0`\n- `pip install mmdetection==3.0.0`\n\nSource:\n- `git clone --recursive <https://github.com/AILab-CVC/YOLO-World.git>`\n- `pip install torch wheel -q`\n- `pip install -e .`\n\n2. For each installation method return a list, where each element of the list is an instruction, in sequential order\n\nBinary: Not provided in the README.\n\nContainer: Not provided in the README.\n\nPackage Manager:\n- Install `torch` version 1.11.0\n- Install `mmyolo` version 0.6.0\n- Install `mmdetection` version 3.0.0\n\nSource:\n- Clone the YOLO-World repository using `git clone --recursive <https://github.com/AILab-CVC/YOLO-World.git>`\n- Install `torch` and `wheel` using `pip install torch wheel -q`\n- Install the local package using `pip install -e .`",
    "answers": [
      "Source"
    ],
    "prompt": " \n        Given the following README, extract the installation instructions for each installation method.         These methods are plans containing instructions for installing research software, to be executed in a sequential order and under defined conditions. These are:     Binary: Download and run precompiled files. For example, GitHub releases.     Container: Use isolated environments. For example,, Docker, Podman, or Singularity.     Package Manager: Install via tools and indexed repositories. For example, Conda, Homebrew, or Pip     Source: Install using command-line, following instructions. For example, clone from repository or download files.         Perform the following actions. For each Readme:\n         1. Extract the installation instructions for each method           2. For each installation method return a list, where each element of the list is an instruction, in sequential order         Do not add code commands in the list. Be concise. \n        Readme:\n        ```### 1. Installation YOLO-World is developed based on `torch==1.11.0` `mmyolo==0.6.0` and `mmdetection==3.0.0`. #### Clone Project ```bash git clone --recursive https://github.com/AILab-CVC/YOLO-World.git ``` #### Install ```bash pip install torch wheel -q pip install -e . `````` \n        "
  },
  {
    "id": "17",
    "response": "1. Binary:\n- To install the current release with GPU support: `pip install tensorflow`\n- To install a smaller CPU-only package: `pip install tensorflow-cpu`\n- To update TensorFlow to the latest version: add `--upgrade` flag to the above commands\n- To install nightly binaries for testing: use `tf-nightly` and `tf-nightly-cpu` packages from PyPi\n2. Container:\n- To use a Docker container: follow the instructions in the TensorFlow install guide\n3. Package Manager:\n- Not provided in the README\n4. Source:\n- To build from source: follow the instructions in the TensorFlow install guide",
    "answers": [
      "Source"
    ],
    "prompt": " \n        Given the following README, extract the installation instructions for each installation method.         These methods are plans containing instructions for installing research software, to be executed in a sequential order and under defined conditions. These are:     Binary: Download and run precompiled files. For example, GitHub releases.     Container: Use isolated environments. For example,, Docker, Podman, or Singularity.     Package Manager: Install via tools and indexed repositories. For example, Conda, Homebrew, or Pip     Source: Install using command-line, following instructions. For example, clone from repository or download files.         Perform the following actions. For each Readme:\n         1. Extract the installation instructions for each method           2. For each installation method return a list, where each element of the list is an instruction, in sequential order         Do not add code commands in the list. Be concise. \n        Readme:\n        ```## Install See the [TensorFlow install guide](https://www.tensorflow.org/install) for the [pip package](https://www.tensorflow.org/install/pip), to [enable GPU support](https://www.tensorflow.org/install/gpu), use a [Docker container](https://www.tensorflow.org/install/docker), and [build from source](https://www.tensorflow.org/install/source). To install the current release, which includes support for [CUDA-enabled GPU cards](https://www.tensorflow.org/install/gpu) *(Ubuntu and Windows)*: ``` $ pip install tensorflow ``` Other devices (DirectX and MacOS-metal) are supported using [Device plugins](https://www.tensorflow.org/install/gpu_plugins#available_devices). A smaller CPU-only package is also available: ``` $ pip install tensorflow-cpu ``` To update TensorFlow to the latest version, add `--upgrade` flag to the above commands. *Nightly binaries are available for testing using the [tf-nightly](https://pypi.python.org/pypi/tf-nightly) and [tf-nightly-cpu](https://pypi.python.org/pypi/tf-nightly-cpu) packages on PyPi.*``` \n        "
  },
  {
    "id": "18",
    "response": "1. Extract the installation instructions for each method\n\nBinary:\n- No binary installation instructions provided.\n\nContainer:\n- No container installation instructions provided.\n\nPackage Manager (pip):\n1. Create a virtual environment with the version of Python you're going to use and activate it.\n2. Install one of Flax, PyTorch, or TensorFlow.\n3. Install the transformers package using pip: `pip install transformers`\n\nPackage Manager (conda):\n1. Install transformers using conda: `conda install conda-forge::transformers`\n\nSource:\n- No source installation instructions provided.\n\n2. For each installation method return a list, where each element of the list is an instruction, in sequential order\n\nBinary:\n- Not applicable.\n\nContainer:\n- Not applicable.\n\nPackage Manager (pip):\n- Create a virtual environment and activate it.\n- Install one of Flax, PyTorch, or TensorFlow.\n- Install the transformers package using pip: `pip install transformers`\n\nPackage Manager (conda):\n- Install transformers using conda: `conda install conda-forge::transformers`\n\nSource:\n- Not applicable.",
    "answers": [
      "Source"
    ],
    "prompt": " \n        Given the following README, extract the installation instructions for each installation method.         These methods are plans containing instructions for installing research software, to be executed in a sequential order and under defined conditions. These are:     Binary: Download and run precompiled files. For example, GitHub releases.     Container: Use isolated environments. For example,, Docker, Podman, or Singularity.     Package Manager: Install via tools and indexed repositories. For example, Conda, Homebrew, or Pip     Source: Install using command-line, following instructions. For example, clone from repository or download files.         Perform the following actions. For each Readme:\n         1. Extract the installation instructions for each method           2. For each installation method return a list, where each element of the list is an instruction, in sequential order         Do not add code commands in the list. Be concise. \n        Readme:\n        ```## Installation ### With pip This repository is tested on Python 3.8+, Flax 0.4.1+, PyTorch 1.11+, and TensorFlow 2.6+. You should install \ud83e\udd17 Transformers in a [virtual environment](https://docs.python.org/3/library/venv.html). If you're unfamiliar with Python virtual environments, check out the [user guide](https://packaging.python.org/guides/installing-using-pip-and-virtual-environments/). First, create a virtual environment with the version of Python you're going to use and activate it. Then, you will need to install at least one of Flax, PyTorch, or TensorFlow. Please refer to [TensorFlow installation page](https://www.tensorflow.org/install/), [PyTorch installation page](https://pytorch.org/get-started/locally/#start-locally) and/or [Flax](https://github.com/google/flax#quick-install) and [Jax](https://github.com/google/jax#installation) installation pages regarding the specific installation command for your platform. When one of those backends has been installed, \ud83e\udd17 Transformers can be installed using pip as follows: ```bash pip install transformers ``` If you'd like to play with the examples or need the bleeding edge of the code and can't wait for a new release, you must [install the library from source](https://huggingface.co/docs/transformers/installation#installing-from-source). ### With conda \ud83e\udd17 Transformers can be installed using conda as follows: ```shell script conda install conda-forge::transformers ``` > **_NOTE:_** Installing `transformers` from the `huggingface` channel is deprecated. Follow the installation pages of Flax, PyTorch or TensorFlow to see how to install them with conda. > **_NOTE:_** On Windows, you may be prompted to activate Developer Mode in order to benefit from caching. If this is not an option for you, please let us know in [this issue](https://github.com/huggingface/huggingface_hub/issues/1062).``` \n        "
  },
  {
    "id": "19",
    "response": "1. Install from pip\n* Install PyTorch (>=1.10.0)\n* Install PyTorch Geometric (>=2.0.0)\n* Install DIG: Dive into Graphs\n2. Install from source\n* Clone the DIG repository\n* Change directory to the cloned repository\n* Install DIG from the source using pip\n\nNote: The version can be checked by importing the package and printing its version in Python for both installation methods.",
    "answers": [
      "Source"
    ],
    "prompt": " \n        Given the following README, extract the installation instructions for each installation method.         These methods are plans containing instructions for installing research software, to be executed in a sequential order and under defined conditions. These are:     Binary: Download and run precompiled files. For example, GitHub releases.     Container: Use isolated environments. For example,, Docker, Podman, or Singularity.     Package Manager: Install via tools and indexed repositories. For example, Conda, Homebrew, or Pip     Source: Install using command-line, following instructions. For example, clone from repository or download files.         Perform the following actions. For each Readme:\n         1. Extract the installation instructions for each method           2. For each installation method return a list, where each element of the list is an instruction, in sequential order         Do not add code commands in the list. Be concise. \n        Readme:\n        ```# Installation ### Install from pip The key dependencies of DIG: Dive into Graphs are PyTorch (>=1.10.0), PyTorch Geometric (>=2.0.0), and RDKit. 1. Install [PyTorch](https://pytorch.org/get-started/locally/) (>=1.10.0) ```shell script $ python -c `import torch`; print(torch.__version__)` >>> 1.10.0 ``` 2. Install [PyG](https://pytorch-geometric.readthedocs.io/en/latest/notes/installation.html#) (>=2.0.0) ```shell script $ python -c `import torch_geometric; print(torch_geometric.__version__)` >>> 2.0.0 ``` 3. Install DIG: Dive into Graphs. ```shell script pip install dive-into-graphs ``` After installation, you can check the version. You have successfully installed DIG: Dive into Graphs if no error occurs. ``` shell script $ python >>> from dig.version import __version__ >>> print(__version__) ``` ### Install from source If you want to try the latest features that have not been released yet, you can install dig from source. ```shell script git clone https://github.com/divelab/DIG.git cd DIG pip install . `````` \n        "
  },
  {
    "id": "20",
    "response": "1. Binary:\n   - There are no binary installation instructions provided in the README.\n2. Container:\n   - There are no container installation instructions provided in the README.\n3. Package Manager:\n   - With pip:\n     - pip install langchain\n4. Source:\n   - There are no source installation instructions provided in the README.\n\nNote: The provided README only includes instructions for Package Manager installation using pip and Conda.",
    "answers": [
      "Source"
    ],
    "prompt": " \n        Given the following README, extract the installation instructions for each installation method.         These methods are plans containing instructions for installing research software, to be executed in a sequential order and under defined conditions. These are:     Binary: Download and run precompiled files. For example, GitHub releases.     Container: Use isolated environments. For example,, Docker, Podman, or Singularity.     Package Manager: Install via tools and indexed repositories. For example, Conda, Homebrew, or Pip     Source: Install using command-line, following instructions. For example, clone from repository or download files.         Perform the following actions. For each Readme:\n         1. Extract the installation instructions for each method           2. For each installation method return a list, where each element of the list is an instruction, in sequential order         Do not add code commands in the list. Be concise. \n        Readme:\n        ```## Quick Install With pip: ```bash pip install langchain ``` With conda: ```bash conda install langchain -c conda-forge ``` ``` \n        "
  },
  {
    "id": "21",
    "response": "Binary:\n- None\n\nContainer:\n- None\n\nPackage Manager:\n- None\n\nSource:\n- Copy the `CamGen_v2` folder into the Blender add-on folder.\n- Find and activate `Generic: Camera_Generator_v2` in the list of available Add-ons. (Press refresh if necessary)\n- [Optional] Install matplotlib and PyQt5 for Blender's bundled Python version. (Run the command in a terminal: `$BLENDERPATH/$VERSION/python/bin/python3.10 -m pip install matplotlib PyQt5`)",
    "answers": [
      "Source"
    ],
    "prompt": " \n        Given the following README, extract the installation instructions for each installation method.         These methods are plans containing instructions for installing research software, to be executed in a sequential order and under defined conditions. These are:     Binary: Download and run precompiled files. For example, GitHub releases.     Container: Use isolated environments. For example,, Docker, Podman, or Singularity.     Package Manager: Install via tools and indexed repositories. For example, Conda, Homebrew, or Pip     Source: Install using command-line, following instructions. For example, clone from repository or download files.         Perform the following actions. For each Readme:\n         1. Extract the installation instructions for each method           2. For each installation method return a list, where each element of the list is an instruction, in sequential order         Do not add code commands in the list. Be concise. \n        Readme:\n        ```### Installation 1. Copy the `CamGen_v2` folder into the Blender [add-on folder](https://docs.blender.org/manual/en/latest/advanced/blender_directory_layout.html#platform-dependent-paths) that is right for your operating system, e.g. for Blender 4.0 under Linux ~/.config/blender/4.0/scripts/addons/ 2. Open Blender and navigate to `Edit > Preferences > Add-ons` 3. Find and activate `Generic: Camera_Generator_v2` the list of available Add-ons. **You will need to press *refresh* in the Add-ons panel if you do not see the Camera_Generator option.** 4. [Optional] To enable experimental lens analysis operations and plotting of the results, additional packages have to be installed for Blender's bundled Python version. '`$BLENDERPATH/$VERSION/python/bin/python3.10 -m pip install matplotlib PyQt5.``` \n        "
  },
  {
    "id": "22",
    "response": "1. Binary: Not provided in the README.\n2. Container: Not provided in the README.\n3. Package Manager (Conda):\n- \"conda env create -f environment.yml\"\n- \"conda activate DiT\"\n4. Source: Not provided in the README.\n\nNote: The provided README only includes instructions for Package Manager installation using Conda.",
    "answers": [
      "Source"
    ],
    "prompt": " \n        Given the following README, extract the installation instructions for each installation method.         These methods are plans containing instructions for installing research software, to be executed in a sequential order and under defined conditions. These are:     Binary: Download and run precompiled files. For example, GitHub releases.     Container: Use isolated environments. For example,, Docker, Podman, or Singularity.     Package Manager: Install via tools and indexed repositories. For example, Conda, Homebrew, or Pip     Source: Install using command-line, following instructions. For example, clone from repository or download files.         Perform the following actions. For each Readme:\n         1. Extract the installation instructions for each method           2. For each installation method return a list, where each element of the list is an instruction, in sequential order         Do not add code commands in the list. Be concise. \n        Readme:\n        ```## Setup First, download and set up the repo: ```bash git clone https://github.com/facebookresearch/DiT.git cd DiT ``` We provide an [`environment.yml`](environment.yml) file that can be used to create a Conda environment. If you only want to run pre-trained models locally on CPU, you can remove the `cudatoolkit` and `pytorch-cuda` requirements from the file. ```bash conda env create -f environment.yml conda activate DiT `````` \n        "
  },
  {
    "id": "23",
    "response": "1. Extract the installation instructions for each method:\n\n- Binary: Not provided in the README.\n- Container: Not provided in the README.\n- Package Manager:\n  - Using PyPI server: [\"pip install torchcp\"]\n  - Using TestPyPI server: [\"pip install --index-url <https://test.pypi.org/simple/> --no-deps torchcp\"]\n- Source: Not provided in the README.\n\n2. For each installation method return a list, where each element of the list is an instruction, in sequential order:\n\nBinary: N/A\n\n* Not provided in the README.\n\nContainer: N/A\n\n* Not provided in the README.\n\nPackage Manager:\n\n* Using PyPI server:\n 1. \"pip install torchcp\"\n\n* Using TestPyPI server:\n 1. \"pip install --index-url <https://test.pypi.org/simple/> --no-deps torchcp\"\n\nSource: N/A\n\n* Not provided in the README.",
    "answers": [
      "Source"
    ],
    "prompt": " \n        Given the following README, extract the installation instructions for each installation method.         These methods are plans containing instructions for installing research software, to be executed in a sequential order and under defined conditions. These are:     Binary: Download and run precompiled files. For example, GitHub releases.     Container: Use isolated environments. For example,, Docker, Podman, or Singularity.     Package Manager: Install via tools and indexed repositories. For example, Conda, Homebrew, or Pip     Source: Install using command-line, following instructions. For example, clone from repository or download files.         Perform the following actions. For each Readme:\n         1. Extract the installation instructions for each method           2. For each installation method return a list, where each element of the list is an instruction, in sequential order         Do not add code commands in the list. Be concise. \n        Readme:\n        ```## Installation TorchCP is developed with Python 3.9 and PyTorch 2.0.1. To install TorchCP, simply run ``` pip install torchcp ``` To install from TestPyPI server, run ``` pip install --index-url https://test.pypi.org/simple/ --no-deps torchcp `````` \n        "
  },
  {
    "id": "24",
    "response": "1. Binary: Not provided.\n2. Container: Not provided.\n3. Package Manager:\n- Clone the repository: \"git clone <https://github.com/NUS-HPC-AI-Lab/Neural-Network-Diffusion.git>\"\n- Create a new Conda environment and activate it: \"conda env create -f environment.yml\"\n- Alternatively, install necessary package by: \"pip install -r requirements.txt\"\n4. Source:\n- Clone the repository: \"git clone <https://github.com/NUS-HPC-AI-Lab/Neural-Network-Diffusion.git>\"",
    "answers": [
      "Source"
    ],
    "prompt": " \n        Given the following README, extract the installation instructions for each installation method.         These methods are plans containing instructions for installing research software, to be executed in a sequential order and under defined conditions. These are:     Binary: Download and run precompiled files. For example, GitHub releases.     Container: Use isolated environments. For example,, Docker, Podman, or Singularity.     Package Manager: Install via tools and indexed repositories. For example, Conda, Homebrew, or Pip     Source: Install using command-line, following instructions. For example, clone from repository or download files.         Perform the following actions. For each Readme:\n         1. Extract the installation instructions for each method           2. For each installation method return a list, where each element of the list is an instruction, in sequential order         Do not add code commands in the list. Be concise. \n        Readme:\n        ```## Installation 1. Clone the repository: ``` git clone https://github.com/NUS-HPC-AI-Lab/Neural-Network-Diffusion.git ``` 2. Create a new Conda environment and activate it: ``` conda env create -f environment.yml conda activate pdiff ``` or install necessary package by: ``` pip install -r requirements.txt `````` \n        "
  },
  {
    "id": "25",
    "response": "1. Installation instructions for each method:\n\n- Binary: Not provided in the README.\n- Container: Use the provided docker image by OpenPCDet.\n- Package Manager: Not provided in the README.\n- Source: Not provided in the README.\n\n2. Installation method: Container\n\n[1] Pull the OpenPCDet docker image:\n```bash\ndocker pull openpcdet/openpcdet:latest\n```\n[2] Run the OpenPCDet docker image:\n```bash\ndocker run -it --gpus all -v /path/to/your/data:/data openpcdet/openpcdet:latest\n```\n\nNote: Replace `/path/to/your/data` with the path to your data directory.",
    "answers": [
      "Source"
    ],
    "prompt": " \n        Given the following README, extract the installation instructions for each installation method.         These methods are plans containing instructions for installing research software, to be executed in a sequential order and under defined conditions. These are:     Binary: Download and run precompiled files. For example, GitHub releases.     Container: Use isolated environments. For example,, Docker, Podman, or Singularity.     Package Manager: Install via tools and indexed repositories. For example, Conda, Homebrew, or Pip     Source: Install using command-line, following instructions. For example, clone from repository or download files.         Perform the following actions. For each Readme:\n         1. Extract the installation instructions for each method           2. For each installation method return a list, where each element of the list is an instruction, in sequential order         Do not add code commands in the list. Be concise. \n        Readme:\n        ```### **Installation** 1. Prepare for the running environment. You can use the docker image provided by [`OpenPCDet`](https://github.com/open-mmlab/OpenPCDet). Our experiments are based on the docker provided by Voxel-R-CNN and we use NVIDIA Tesla V100 to train our Aydiv.``` \n        "
  },
  {
    "id": "26",
    "response": "1. Binary: Not provided in the README.\n2. Container: Not provided in the README.\n3. Package Manager:\n- Create a Conda environment with name \"bitdelta\" and Python version 3.9.\n- Activate the \"bitdelta\" environment.\n- Install the package in editable mode using pip.\n4. Source:\n- Clone the BitDelta repository.\n- Navigate to the BitDelta directory.\n\nNote: The provided README assumes that the user has Conda and pip installed and configured.",
    "answers": [
      "Source"
    ],
    "prompt": " \n        Given the following README, extract the installation instructions for each installation method.         These methods are plans containing instructions for installing research software, to be executed in a sequential order and under defined conditions. These are:     Binary: Download and run precompiled files. For example, GitHub releases.     Container: Use isolated environments. For example,, Docker, Podman, or Singularity.     Package Manager: Install via tools and indexed repositories. For example, Conda, Homebrew, or Pip     Source: Install using command-line, following instructions. For example, clone from repository or download files.         Perform the following actions. For each Readme:\n         1. Extract the installation instructions for each method           2. For each installation method return a list, where each element of the list is an instruction, in sequential order         Do not add code commands in the list. Be concise. \n        Readme:\n        ```## Install 1. Clone the repo and navigate to BitDelta: ``` git clone https://github.com/FasterDecoding/BitDelta cd BitDelta ``` 2. Set up environment: ```bash conda create -yn bitdelta python=3.9 conda activate bitdelta pip install -e . `````` \n        "
  },
  {
    "id": "27",
    "response": "Binary:\n- None\n\nContainer:\n- None\n\nPackage Manager:\n- pip install -r requirements.txt\n\nSource:\n- cp <raw\\_data> /path/to/input\\_path\n- python main.py --conf settings/example.json",
    "answers": [
      "Source"
    ],
    "prompt": " \n        Given the following README, extract the installation instructions for each installation method.         These methods are plans containing instructions for installing research software, to be executed in a sequential order and under defined conditions. These are:     Binary: Download and run precompiled files. For example, GitHub releases.     Container: Use isolated environments. For example,, Docker, Podman, or Singularity.     Package Manager: Install via tools and indexed repositories. For example, Conda, Homebrew, or Pip     Source: Install using command-line, following instructions. For example, clone from repository or download files.         Perform the following actions. For each Readme:\n         1. Extract the installation instructions for each method           2. For each installation method return a list, where each element of the list is an instruction, in sequential order         Do not add code commands in the list. Be concise. \n        Readme:\n        ```## Quick Start First, install the requirement packages declared by `requirements.txt`. Modify [settings/example.json](./settings/example.json) on your desired processing procedure. The configuration file may contains many options. For example, if you want to use regular expressions to match some dirty tokens, you should add your own regular expressions into `re_list` of `rm_re_rules`. Copy raw data to input_path in `settings/example.json`. And make sure the output_path not exists, otherwise the output path will be overwritten. ```{commandline} pip install -r requirements.txt cp <raw_data> /path/to/input_path ``` Then the processing pipeline will generate an `debug_report.json` into /path/to/report_path defined in `settings/example.json`. The report displayed filter ratio of each filter rules, as well as match ratio, time cost and match cases of each regular expression cleaner rules and so on. ```{commandline} python main.py --conf settings/example.json ``` After running the processing pipeline, the cleaned data will be merged as a `.jsonl` file, while there is just one record in a line. The record is in the form of `json`, with the field `text`, representing the refined text.``` \n        "
  },
  {
    "id": "28",
    "response": "1. Binary: Not present in the README.\n2. Container: Not present in the README.\n3. Package Manager:\n- Install the package using pip by running the command: `pip install -e mxeval`\n4. Source:\n- Check out and install this repository by running the command: `git clone git@github.com:FloatAI/humaneval-xl.git`\n- Change the current directory to the cloned repository: `cd mxeval`",
    "answers": [
      "Source"
    ],
    "prompt": " \n        Given the following README, extract the installation instructions for each installation method.         These methods are plans containing instructions for installing research software, to be executed in a sequential order and under defined conditions. These are:     Binary: Download and run precompiled files. For example, GitHub releases.     Container: Use isolated environments. For example,, Docker, Podman, or Singularity.     Package Manager: Install via tools and indexed repositories. For example, Conda, Homebrew, or Pip     Source: Install using command-line, following instructions. For example, clone from repository or download files.         Perform the following actions. For each Readme:\n         1. Extract the installation instructions for each method           2. For each installation method return a list, where each element of the list is an instruction, in sequential order         Do not add code commands in the list. Be concise. \n        Readme:\n        ```### Installation Check out and install this repository: ``` git clone git@github.com:FloatAI/humaneval-xl.git cd mxeval pip install -e mxeval `````` \n        "
  },
  {
    "id": "29",
    "response": "1. Extract the installation instructions for each method\n\nBinary: Not provided in this README\n\nContainer: Not provided in this README\n\nPackage Manager:\n- conda create -n DCVSMNet python=3.8\n- conda install pytorch torchvision torchaudio cudatoolkit=11.3 -c pytorch -c nvidia\n- pip install opencv-python\n- pip install scikit-image\n- pip install tensorboard\n- pip install matplotlib\n- pip install tqdm\n- pip install timm==0.5.4\n\nSource: Not provided in this README\n\n2. For each installation method return a list, where each element of the list is an instruction, in sequential order\n\nBinary: Not applicable for this case\n- [Not applicable]\n\nContainer: Not applicable for this case\n- [Not applicable]\n\nPackage Manager:\n- Create a virtual environment and activate it\n- Install dependencies using conda\n- Install additional dependencies using pip\n\nSource: Not applicable for this case\n- [Not applicable]",
    "answers": [
      "Source"
    ],
    "prompt": " \n        Given the following README, extract the installation instructions for each installation method.         These methods are plans containing instructions for installing research software, to be executed in a sequential order and under defined conditions. These are:     Binary: Download and run precompiled files. For example, GitHub releases.     Container: Use isolated environments. For example,, Docker, Podman, or Singularity.     Package Manager: Install via tools and indexed repositories. For example, Conda, Homebrew, or Pip     Source: Install using command-line, following instructions. For example, clone from repository or download files.         Perform the following actions. For each Readme:\n         1. Extract the installation instructions for each method           2. For each installation method return a list, where each element of the list is an instruction, in sequential order         Do not add code commands in the list. Be concise. \n        Readme:\n        ```## Install ### Create a virtual environment and activate it. ``` conda create -n DCVSMNet python=3.8 conda activate DCVSMNet ``` ### Dependencies ``` conda install pytorch torchvision torchaudio cudatoolkit=11.3 -c pytorch -c nvidia pip install opencv-python pip install scikit-image pip install tensorboard pip install matplotlib pip install tqdm pip install timm==0.5.4 `````` \n        "
  },
  {
    "id": "30",
    "response": "1. Extracting the installation instructions for each method:\n\n- Binary: Not provided.\n- Container: Not provided.\n- Package Manager:\n  - \"conda create --GDPO --file spec-list.txt\"\n  - \"conda activate GDPO\"\n  - \"pip install requirements.txt\"\n- Source: Not provided.\n\n2. For each installation method return a list, where each element of the list is an instruction, in sequential order:\n\nBinary: Not applicable for this README.\n\nContainer: Not applicable for this README.\n\nPackage Manager:\n\n* `conda create --GDPO --file spec-list.txt`\n* `conda activate GDPO`\n* `pip install requirements.txt`\n\nSource: Not applicable for this README.",
    "answers": [
      "Source"
    ],
    "prompt": " \n        Given the following README, extract the installation instructions for each installation method.         These methods are plans containing instructions for installing research software, to be executed in a sequential order and under defined conditions. These are:     Binary: Download and run precompiled files. For example, GitHub releases.     Container: Use isolated environments. For example,, Docker, Podman, or Singularity.     Package Manager: Install via tools and indexed repositories. For example, Conda, Homebrew, or Pip     Source: Install using command-line, following instructions. For example, clone from repository or download files.         Perform the following actions. For each Readme:\n         1. Extract the installation instructions for each method           2. For each installation method return a list, where each element of the list is an instruction, in sequential order         Do not add code commands in the list. Be concise. \n        Readme:\n        ```## Installing dependence ``` conda create --GDPO --file spec-list.txt conda activate GDPO pip install requrements.txt ``` If there are still issues, please refer to DiGress and add other dependencies as necessary. In the following steps, make sure you have activated the GDPO environment. ``` conda activate GDPO `````` \n        "
  },
  {
    "id": "31",
    "response": "1. Extract the installation instructions for each method\n\nBinary: Not provided in the README\n\nContainer: Not provided in the README\n\nPackage Manager:\n- Open Julia's package manager\n- Type: `push!(LOAD_PATH,pwd())`\n- Type: `using ISL`\n- Clone the ISL repository\n\nSource:\n- Clone the ISL repository\n- Type: `push!(LOAD_PATH,pwd())`\n- Type: `using ISL`\n- Activate the ISL repository environment by typing: `(@v1.9) pkg> activate pathToRepository/ISL`\n- If using utility subrepositories like GAN or DeepAR, make sure they are in your path\n\n2. For each installation method return a list, where each element of the list is an instruction, in sequential order\n\nBinary: Not provided\n\nContainer: Not provided\n\nPackage Manager: [\"Open Julia's package manager\", \"Type: `push!(LOAD\\_PATH,pwd())`\", \"Type: `using ISL`\", \"Clone the ISL repository\"]\n\nSource: [\"Clone the ISL repository\", \"Type: `push!(LOAD_PATH,pwd())`\", \"Type: `using ISL`\", \"Activate the ISL repository environment by typing: `(@v1.9) pkg> activate pathToRepository/ISL`\", \"If using utility subrepositories like GAN or DeepAR, make sure they are in your path\"]",
    "answers": [
      "Source"
    ],
    "prompt": " \n        Given the following README, extract the installation instructions for each installation method.         These methods are plans containing instructions for installing research software, to be executed in a sequential order and under defined conditions. These are:     Binary: Download and run precompiled files. For example, GitHub releases.     Container: Use isolated environments. For example,, Docker, Podman, or Singularity.     Package Manager: Install via tools and indexed repositories. For example, Conda, Homebrew, or Pip     Source: Install using command-line, following instructions. For example, clone from repository or download files.         Perform the following actions. For each Readme:\n         1. Extract the installation instructions for each method           2. For each installation method return a list, where each element of the list is an instruction, in sequential order         Do not add code commands in the list. Be concise. \n        Readme:\n        ```## How to install To install ISL, simply use Julia's package manager. The module is not registered so you need to clone the repository and follow the following steps: ```` julia> push!(LOAD_PATH,pwd()) # You are in the ISL Repository julia> using ISL ```` To reproduce the enviroment for compiling the repository: ```` (@v1.9) pkg> activate pathToRepository/ISL ```` If you want to use any utility subrepository like GAN or DeepAR, make sure it's within your path.``` \n        "
  },
  {
    "id": "32",
    "response": "1. Extract the installation instructions for each method\n\nBinary: Not provided in this README\n\nContainer: Not provided in this README\n\nPackage Manager:\n- Create a virtual environment using Conda or Pip for python 3.11\n- Activate the virtual environment\n- Install Pip in the virtual environment\n- Go to the PyTorch website and install the correct version for your machine in the virtual environment\n- Confirm that PyTorch is working by running `nvidia-smi` and `python -c \"import torch; print(torch.cuda.is_available())\"`\n\nSource: Not provided in this README\n\n2. For each installation method return a list, where each element of the list is an instruction, in sequential order\n\nPackage Manager:\n- Create a virtual environment using Conda or Pip for python 3.11\n- Activate the virtual environment\n- Install Pip in the virtual environment\n- Install PyTorch in the virtual environment\n- Confirm that PyTorch is working\n\n* Create a virtual environment using Conda or Pip for python 3.11:\n`conda create --name spineps python=3.11`\n\n* Activate the virtual environment:\n`conda activate spineps`\n\n* Install Pip in the virtual environment:\n`conda install pip`\n\n* Go to the PyTorch website and install the correct version for your machine in the virtual environment:\n- Open a web browser and go to <https://pytorch.org/get-started/locally/>\n- Follow the instructions for your operating system and install PyTorch\n\n* Confirm that PyTorch is working:\n`nvidia-smi`\n`python -c \"import torch; print(torch.cuda.is_available())\"`",
    "answers": [
      "Source"
    ],
    "prompt": " \n        Given the following README, extract the installation instructions for each installation method.         These methods are plans containing instructions for installing research software, to be executed in a sequential order and under defined conditions. These are:     Binary: Download and run precompiled files. For example, GitHub releases.     Container: Use isolated environments. For example,, Docker, Podman, or Singularity.     Package Manager: Install via tools and indexed repositories. For example, Conda, Homebrew, or Pip     Source: Install using command-line, following instructions. For example, clone from repository or download files.         Perform the following actions. For each Readme:\n         1. Extract the installation instructions for each method           2. For each installation method return a list, where each element of the list is an instruction, in sequential order         Do not add code commands in the list. Be concise. \n        Readme:\n        ```## Installation (Ubuntu) This installation assumes you know your way around conda and virtual environments. ### Setup Venv The order of the following instructions is important! 1. Use Conda or Pip to create a venv for python 3.11, we are using conda for this example: ```bash conda create --name spineps python=3.11 conda activate spineps conda install pip ``` 2. Go to <a href=`https://pytorch.org/get-started/locally/`>https://pytorch.org/get-started/locally/</a> and install a correct pytorch version for your machine in your venv 3. Confirm that your pytorch package is working! Try calling these commands: ```bash nvidia-smi ``` This should show your GPU and it's usage. ```bash python -c `import torch; print(torch.cuda.is_available())` ``` This should throw no errors and return True``` \n        "
  },
  {
    "id": "33",
    "response": "1. Extract the installation instructions for each method\n\nBinary: Not provided in the README.\n\nContainer: Not provided in the README.\n\nPackage Manager: Not provided in the README.\n\nSource:\n- Require `devtools`\n- Install the development version from GitHub with: `install_github(`https://github.com/nand1155/CausNet`)`\n\n2. For each installation method return a list, where each element of the list is an instruction, in sequential order\n\nSource:\n- Require `devtools`\n- Install the development version from GitHub with: `install_github(`https://github.com/nand1155/CausNet`)`",
    "answers": [
      "Source"
    ],
    "prompt": " \n        Given the following README, extract the installation instructions for each installation method.         These methods are plans containing instructions for installing research software, to be executed in a sequential order and under defined conditions. These are:     Binary: Download and run precompiled files. For example, GitHub releases.     Container: Use isolated environments. For example,, Docker, Podman, or Singularity.     Package Manager: Install via tools and indexed repositories. For example, Conda, Homebrew, or Pip     Source: Install using command-line, following instructions. For example, clone from repository or download files.         Perform the following actions. For each Readme:\n         1. Extract the installation instructions for each method           2. For each installation method return a list, where each element of the list is an instruction, in sequential order         Do not add code commands in the list. Be concise. \n        Readme:\n        ```## Installation You can install the development version from GitHub with: ``` r require(`devtools`) install_github(`https://github.com/nand1155/CausNet`)``` \n        "
  }
]