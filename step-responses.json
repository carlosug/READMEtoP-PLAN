[
  [
    "1",
    "```json\n{\n\"plan\": [\n    {\n\"type\": \"OS X & Linux\",\n\"steps\": [\n    {\"text\": \"Download and install SICStus Prolog.\", \"n_steps\": 1},\n    {\"text\": \"Download DALI and test it by running an example DALI MAS.\", \"n_steps\": 2}\n]\n    },\n    {\n\"type\": \"Windows\",\n\"steps\": [\n    {\""
  ],
  [
    "2",
    "```python\nimport json\n\nreadmes = [\"Readme\"]\n\nresults = {}\n\nfor readme in readmes:\n    with open(readme) as f:\n        text = f.read()\n\n    # Extract installation instructions\n    instructions = text.split(\"Please refer to the `setup.py` file for installation instructions.\")\n    instructions = instructions[1].splitlines()\n\n    # Create a list of instructions for each method\n    methods = []\n    for line"
  ],
  [
    "3",
    "```python\nimport json\n\nreadmes = [\n    \"\"\"\n    # Software installation instructions\n\n    **Source:**\n    1. Download the source code.\n    2. Extract the source code.\n    3. Compile the software.\n    4. Install the software.\n    \"\"\"\n]\n\ninstallation_instructions = {\"plan\": [\n    {\"type\": \"Source\", \"steps\": [\n        {\"text\": \"Download the source code.\", \"n_steps\":"
  ],
  [
    "4",
    "```python\nimport json\n\n# Readme text\nreadme_text = \"\"\"## Getting Started Step 1: Download the dataset folder from onedrive by [data.zip](https://portland-my.sharepoint.com/:u:/g/personal/liuhui3-c_my_cityu_edu_hk/EfApQlFP3PhFjUW4527STo0BALMdP16zs-HPMNgwQVFWs"
  ],
  [
    "5",
    "```python\nimport json\n\nread_me_text = \"\"\"## Installation\n\nClone this repository and its submodules. We use docker to install dependencies.\n\nThe recommended way to build the docker image is:\n\n```bash\ndocker build -t steam_icp \\\n--build-arg USERID=$(id -u) \\\n--build-arg GROUPID=$(id -g) \\\n--build-arg USERNAME=$(whoami) \\\n--build-arg HOMED"
  ],
  [
    "6",
    "```python\nimport json\n\n# Readme text\nreadme_text = \"\"\"# Installation - Make sure you have Python, Pip and R installed. - Checkout this repository - Install the python dependencies with ``` pip3 install -r requirements.txt ``` - Install the `pygirgs` package at https://github.com/PFischbeck/pygirgs - Install the R dependencies (used for plots) with ``` R -e 'install.packages(c(ggplot2, reshape2"
  ],
  [
    "7",
    "```python\nimport json\n\nreadme_text = \"\"\"## Installation pip install -r requirements.txt *Note: I did not us a virtual environment so the packages in the requirements.txt file are probably not reflective of all the packages used in this project. If some issues pop up please don't hesitate to email me at: gpinto@usc.edu*\"\"\"\n\n# Extract installation instructions for each method\ninstructions = readme_text.split(\"**\")\n\n# Create"
  ],
  [
    "8",
    "```python\nimport json\n\nread_me_text = \"\"\"## Installation\n\n### Dependencies\n\nInitialize git submodules with `git submodule init` and `git submodule update`.\n\nInstall the specific versions of every package from `requirements.txt` in a new conda environment:\n\n```\nconda create --name gsft python=3.9 conda activate gsft pip install -r requirements.txt\n```\n\nTo ensure that Python paths are properly defined, update the `~/.bashrc"
  ],
  [
    "9",
    "```python\nimport json\n\nread_me_text = \"\"\"## Installation\n\nThe project can be installed by running the following command in your terminal:\n\n```bash\npip install -r requirements.txt\n```\"\"\"\n\n# Extract installation instructions for each method\ninstructions = read_me_text.split(\"by running the following command\")[-1].splitlines()[0].strip()\n\n# Return a list of instructions in JSON format\nprint(json.dumps({\"plan\": [{\"type"
  ],
  [
    "10",
    "```json\n{\n\"plan\": [\n    {\n\"type\": \"Source\",\n\"steps\": [\n    {\"text\": \"Clone the VIGA repository.\", \"n_steps\": 1},\n    {\"text\": \"Download and unzip taxdmp.zip and put it in ./db/\", \"n_steps\": 2},\n    {\"text\": \"Download prot.accession2taxid and RefSeqVirusProtein files.\", \"n_steps\": "
  ],
  [
    "11",
    "```json\n{\"plan\": [\n    {\"type\": \"Linux (Ubuntu and Pop!_OS)\", \"steps\": [\n        {\"text\": \"Download the Linux zip file and, from the command window, run a bash command for the install.sh file, in the corresponding installation folder.\", \"n_steps\": 2}\n    ]},\n    {\"type\": \"Mac OS\", \"steps\": [\n        {\"text\": \"Download the Mac zip file and copy the N"
  ],
  [
    "12",
    "```json\n{\"plan\": [\n    {\"type\": \"Linux (Ubuntu and Pop!_OS)\", \"steps\": [\n        {\"text\": \"Download the Linux zip file and, from the command window, run a bash command for the install.sh file, in the corresponding installation folder.\", \"n_steps\": 2}\n    ]},\n    {\"type\": \"Mac OS\", \"steps\": [\n        {\"text\": \"Download the Mac zip file and copy the N"
  ],
  [
    "13",
    "```json\n{\"plan\": [\n    {\"type\": \"Linux (Ubuntu and Pop!_OS)\", \"steps\": [\n        {\"text\": \"Download the Linux zip file and, from the command window, run a bash command for the install.sh file, in the corresponding installation folder.\", \"n_steps\": 2}\n    ]},\n    {\"type\": \"Mac OS\", \"steps\": [\n        {\"text\": \"Download the Mac zip file and copy the N"
  ],
  [
    "14",
    "```python\nimport json\n\n# Readme text\nreadme_text = \"\"\"## Setup The following steps provide the necessary setup to run our codes.\n\n1. Create a Python virtual environment with Conda:\n```\nconda create -n myenv python=3.10\nconda activate myenv\n```\n\n2. Install PyTorch `v2.1.0` with compatible cuda version, following instructions from [PyTorch Installation Page](https://pytorch.org/get-"
  ],
  [
    "15",
    "```python\nimport json\n\nreadme_text = \"\"\"## Requirements\n\nThe code has been tested with Python 3.9.13. Please first install the required packages by:\n\n```bash\npip install -r requirements.txt\n```\n\nYou also need an OpenAI API key to run GeneGPT with Codex. Replace the placeholder with your key in `config.py`:\n\n```bash\n$ cat config.py\nAPI_KEY = 'YOUR_OPENAI_API"
  ],
  [
    "16",
    "```python\nimport json\n\nread_me_text = \"\"\"\n\n### Docker installation (isolated)\n\n...\n\n#### Native installation\n\n...\n\n\"\"\"\n\n# Extracting installation instructions for each method\nmethods = {\"Docker\": {\"plan\": [\"isolated\"], \"steps\": [{\"text\": \"Clone the repository\", \"n_steps\": [\"1\"]}, {\"text\": \"Build the Docker image\", \"n_steps\": [\"2\"]}, {\"text\": \"Run the container\", \"n"
  ],
  [
    "17",
    "```python\nimport json\n\n# Readme text\nreadme_text = \"\"\"## Setup This codebase is supported on Ubuntu and has not been tested on Windows or macOS. We recommend using TPUs for training and inference, although it is also possible to use GPUs. On TPU, the code is highly optimized with Jax's Pallas and can achieve high MFUs with RingAttention at very large context sizes. On GPU, the code is based on XLA and is not as optimized as it is"
  ],
  [
    "18",
    "```python\nimport json\n\n# Readme text\nreadme_text = \"\"\"## \u2728 Getting Started ### \ud83d\udee0\ufe0f Step 1: Installation UFO requires **Python >= 3.10** running on **Windows OS >= 10**. It can be installed by running the following command: ```bash # [optional to create conda environment] # conda create -n ufo python=3.10 # conda activate ufo # clone the repository git clone https://github.com/microsoft/"
  ],
  [
    "19",
    "```json\n{\"plan\": [\n    {\"type\": \"Linux (Ubuntu and Pop!_OS)\", \"steps\": [\n        {\"text\": \"Download the Linux zip file and, from the command window, run a bash command for the install.sh file, in the corresponding installation folder.\", \"n_steps\": 2}\n    ]},\n    {\"type\": \"Mac OS\", \"steps\": [\n        {\"text\": \"Download the Mac zip file and copy the N"
  ],
  [
    "20",
    "```python\nimport json\n\nread_me_text = \"\"\"### 1. Installation YOLO-World is developed based on `torch==1.11.0` `mmyolo==0.6.0` and `mmdetection==3.0.0`.\n\n#### Clone Project\n```bash\ngit clone --recursive https://github.com/AILab-CVC/YOLO-World.git\n```\n\n#### Install\n```bash\npip install torch"
  ],
  [
    "21",
    "```json\n{\n  \"plan\": [\n    {\n      \"type\": \"pip package\",\n      \"steps\": [\n        {\"text\": \"Install the current release of TensorFlow with GPU support:\", \"n_steps\": [\"1\"]},\n        {\"text\": \"Install the CPU-only package:\", \"n_steps\": [\"2\"]},\n        {\"text\": \"Upgrade TensorFlow to the latest version:\", \"n_steps\": [\"3\"]},\n        {\""
  ],
  [
    "22",
    "```json\n{\n  \"plan\": [\n    {\n      \"type\": \"With pip\",\n      \"steps\": [\n        {\"text\": \"Create a virtual environment with the version of Python you're going to use and activate it.\", \"n_steps\": [\"1\"]},\n        {\"text\": \"Install one of Flax, PyTorch, or TensorFlow.\", \"n_steps\": [\"2\"]},\n        {\"text\": \"Install \ud83e\udd17 Transformers using pip.\","
  ],
  [
    "23",
    "```json\n{\n\"plan\": [\n    {\n\"type\": \"Install from pip\",\n\"steps\": [\n    {\"text\": \"Install PyTorch (>=1.10.0)\", \"n_steps\": 1},\n    {\"text\": \"Install PyG (>=2.0.0)\", \"n_steps\": 1},\n    {\"text\": \"Install DIG: Dive into Graphs\", \"n_steps\": 1}\n]"
  ],
  [
    "24",
    "```python\nimport json\n\nreadme_text = \"\"\"## Quick Install With pip: ```bash pip install langchain ``` With conda: ```bash conda install langchain -c conda-forge ```\"\"\"\n\n# Extract instructions for each method\ninstructions = readme_text.split(\"With\")\n\n# Create a dictionary for each method\ninstallation_plans = {}\n\n# Iterate over each method and extract instructions\nfor i, method_instructions in enumerate(instructions[1::2], start"
  ],
  [
    "25",
    "```json\n{\n\"plan\": [\n  {\n    \"type\": \"Copy folder\",\n    \"steps\": [\n      {\"text\": \"Copy the `CamGen_v2` folder into the Blender [add-on folder]...\", \"n_steps\": 1}\n    ]\n  },\n  {\n    \"type\": \"Open Blender and navigate to Add-ons\",\n    \"steps\": [\n      {\"text\": \"Open Blender and"
  ],
  [
    "26",
    "```python\nimport json\n\nread_me_text = \"\"\"### 1. Installation YOLO-World is developed based on `torch==1.11.0` `mmyolo==0.6.0` and `mmdetection==3.0.0`.\n\n#### Clone Project\n```bash\ngit clone --recursive https://github.com/AILab-CVC/YOLO-World.git\n```\n\n#### Install\n```bash\npip install torch"
  ],
  [
    "27",
    "```python\nimport json\n\nread_me_text = \"\"\"## Setup First, download and set up the repo:\n\n```bash\ngit clone https://github.com/facebookresearch/DiT.git\ncd DiT\n\nWe provide an [`environment.yml`](environment.yml) file that can be used to create a Conda environment. If you only want to run pre-trained models locally on CPU, you can remove the `cudatoolkit` and `pytorch"
  ],
  [
    "28",
    "```python\nimport json\n\nreadme_text = \"\"\"## Installation TorchCP is developed with Python 3.9 and PyTorch 2.0.1. To install TorchCP, simply run ``` pip install torchcp ``` To install from TestPyPI server, run ``` pip install --index-url https://test.pypi.org/simple/ --no-deps torchcp ``\"\"\"\n\n# Extract the installation instructions for each method\ninstructions = extract_instructions(readme"
  ],
  [
    "29",
    "```python\nimport json\n\nreadme_text = \"\"\"## Installation 1. Clone the repository:\n\n```\ngit clone https://github.com/NUS-HPC-AI-Lab/Neural-Network-Diffusion.git\n```\n\n2. Create a new Conda environment and activate it:\n\n```\nconda env create -f environment.yml\nconda activate pdiff\n```\n\nor install necessary package by:\n\n```\npip install -r requirements.txt\n```"
  ],
  [
    "30",
    "```json\n{\n  \"plan\": [\n    {\n      \"type\": \"docker\",\n      \"steps\": [\n        {\"text\": \"Prepare for the running environment\", \"n_steps\": [\"1\"]}\n      ]\n    }\n  ]\n}\n```\n\n**Explanation:**\n\n* The `plan` list has one element, which is for the `docker` installation method.\n* The `type` key-value pair specifies the installation method."
  ],
  [
    "31",
    "```python\nimport json\n\nreadmes = [\"## Installation You can install the development version from GitHub with: ``` r require(`devtools`) install_github(`https://github.com/nand1155/CausNet`)\"]\n\ninstall_instructions = []\n\nfor readme in readmes:\n    # Extract installation instructions for each method\n    lines = readme.splitlines()\n    start_install = lines.index(\"Installation\")\n    install_instructions.append({\"type\":"
  ],
  [
    "32",
    "```python\nimport json\n\nread_me_text = \"\"\"\n## Install 1. Clone the repo and navigate to BitDelta:\n\n```\ngit clone https://github.com/FasterDecoding/BitDelta cd BitDelta\n```\n\n2. Set up environment:\n\n```bash\nconda create -yn bitdelta python=3.9 conda activate bitdelta pip install -e .\n```\n\"\"\"\n\n# Extract installation instructions for each method\ninstructions = read_me_text"
  ],
  [
    "33",
    "```python\nimport json\n\nread_me_text = \"\"\"### 1. Installation YOLO-World is developed based on `torch==1.11.0` `mmyolo==0.6.0` and `mmdetection==3.0.0`.\n\n#### Clone Project\n```bash\ngit clone --recursive https://github.com/AILab-CVC/YOLO-World.git\n```\n\n#### Install\n```bash\npip install torch"
  ],
  [
    "34",
    "```json\n{\n\"plan\": [\n  {\n    \"type\": \"Package Manager\",\n    \"steps\": [\n      \"Install requirement packages declared by `requirements.txt`\",\n      \"Copy raw data to `input_path` in `settings/example.json`\",\n      \"Make sure `output_path` not exists, otherwise the output path will be overwritten\"\n    ]\n  },\n  {\n    \"type\": \"Container\","
  ],
  [
    "35",
    "```python\nimport json\n\nreadmes_data = [\n    \"\"\"### Installation Check out and install this repository:\n\n```\ngit clone git@github.com:FloatAI/humaneval-xl.git\ncd mxeval\npip install -e mxeval\n```\"\n]\n\nresults = {}\nfor i, readme in enumerate(readmes_data):\n    # Extract the installation instructions for each method\n    instructions = readme.split(\"\\n\")["
  ],
  [
    "36",
    "```python\nimport json\n\nreadmes = [\n\"\"\"\n## Install\n\n**Create a virtual environment and activate it.**\n\n``` conda create -n DCVSMNet python=3.8 conda activate DCVSMNet\n\n**Dependencies:**\n\n```\nconda install pytorch torchvision torchaudio cudatoolkit=11.3 -c pytorch -c nvidia\npip install opencv-python pip install scikit-image pip install tensorboard pip install matplotlib pip install tqdm"
  ],
  [
    "37",
    "```python\nimport json\n\nreadmes = [\n    \"## Installing dependence ``` conda create --GDPO --file spec-list.txt conda activate GDPO pip install requrements.txt ``` If there are still issues, please refer to DiGress and add other dependencies as necessary. In the following steps, make sure you have activated the GDPO environment. ``` conda activate GDPO ``\"\n]\n\ninstallation_methods = {\"plan\": [], \"steps\": []}\n\nfor readme"
  ],
  [
    "38",
    "```json\n{\n\"plan\": [\n{\"type\": \"Package Manager\"},\n],\n\"steps\": [\n{\"text\": \"Push the current working directory to the LOAD_PATH\", \"n_steps\": 2},\n{\"text\": \"Use the ISL module\", \"n_steps\": 1},\n{\"text\": \"Activate the ISL environment\", \"n_steps\": 2},\n{\"text\": \"Make sure any utility subrepository is in your"
  ],
  [
    "39",
    "```python\nimport json\n\nread_me_text = \"\"\"## Installation (Ubuntu)\n\nThis installation assumes you know your way around conda and virtual environments.\n\n### Setup Venv\n\nThe order of the following instructions is important!\n\n1. Use Conda or Pip to create a venv for python 3.11, we are using conda for this example:\n\n```bash\nconda create --name spineps python=3.11\nconda activate spineps\nconda install"
  ]
]